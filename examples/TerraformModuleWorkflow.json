{
  "id": "62e30756-c5ac-462b-a8f6-3268524e2058",
  "data": {
    "nodes": [
      {
        "data": {
          "id": "ChatInput-YtZxI",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-YtZxI",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 1832.7445785480277,
          "y": 2079.4762621094833
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-q2z2g",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "id": "ChatOutput-q2z2g",
        "measured": {
          "height": 229,
          "width": 320
        },
        "position": {
          "x": 2859.725934893725,
          "y": 1703.8158004884124
        },
        "selected": false,
        "type": "genericNode",
        "dragging": false
      },
      {
        "id": "Agent-fsDxt",
        "type": "genericNode",
        "position": {
          "x": 2428.610234610331,
          "y": 1269.8169737790417
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "## Create GitHub repository from template using tool\n1. Create repository from template with:\n   - template_owner: \"hashi-demo-lab\"\n   - template_repo: \"tf-module-template\"\n   - owner: \"hashi-demo-lab\"\n   - name: {repoName}\n   - description: {description}\n   - private: {visibility == \"public\"}\n   - Verify repository name follows Terraform Registry naming convention: terraform-{provider}-{name}",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Agent",
          "id": "Agent-fsDxt"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 459
        },
        "dragging": false
      },
      {
        "id": "ComposioAPI-PKflo",
        "type": "genericNode",
        "position": {
          "x": 1842.345737760094,
          "y": 1488.5702484240735
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "auth_link": {
                "required": false,
                "placeholder": "Click to authenticate",
                "show": false,
                "name": "auth_link",
                "value": "",
                "display_name": "Authentication Link",
                "advanced": true,
                "dynamic": true,
                "info": "Click to authenticate with OAuth2",
                "title_case": false,
                "type": "link",
                "_input_type": "LinkInput",
                "load_from_db": false
              },
              "action_names": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "GITHUB_UPDATE_A_CODE_SCANNING_ALERT",
                  "GITHUB_ADD_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_SECRET_SCANNING_ALERT",
                  "GITHUB_GET_AN_ENVIRONMENT_SECRET",
                  "GITHUB_UPDATE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_REVOKE_AN_INSTALLATION_ACCESS_TOKEN",
                  "GITHUB_CREATE_A_SNAPSHOT_OF_DEPENDENCIES_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_GET_AN_ORGANIZATION_RULE_SUITE",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_GET_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_GET_ALL_GITIGNORE_TEMPLATES",
                  "GITHUB_SEARCH_COMMITS",
                  "GITHUB_LIST_OWNED_PACKAGE_VERSIONS",
                  "GITHUB_LIST_CODESPACES_FOR_THE_ORGANIZATION",
                  "GITHUB_LIST_FOLLOWERS_OF_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PROJECT_COLLABORATORS",
                  "GITHUB_SEARCH_USERS",
                  "GITHUB_CREATE_A_DISCUSSION",
                  "GITHUB_UPDATE_A_COMMIT_COMMENT",
                  "GITHUB_SET_STATUS_CHECK_CONTEXTS",
                  "GITHUB_LIST_COMMENTS_FOR_A_PULL_REQUEST_REVIEW",
                  "GITHUB_CREATE_A_REPLY_FOR_A_REVIEW_COMMENT",
                  "GITHUB_UPDATE_A_TEAM_LEGACY",
                  "GITHUB_CREATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_DELETE_AN_ISSUE_REACTION",
                  "GITHUB_DELETE_REPO_CODESPACE_SECRET_BY_NAME",
                  "GITHUB_GET_ORG_DEV_ENVIRONMENT_SECRET_SAFELY",
                  "GITHUB_LIST_DEPLOYMENT_STATUSES",
                  "GITHUB_GET_A_GITIGNORE_TEMPLATE",
                  "GITHUB_LIST_APP_INSTALLATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_LARGE_FILES",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_TEAM",
                  "GITHUB_START_AN_IMPORT",
                  "GITHUB_CANCEL_AN_IMPORT",
                  "GITHUB_DELETE_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_LABELS_TO_AN_ISSUE",
                  "GITHUB_START_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_DOWNLOAD_JOB_LOGS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_GET_ALL_STATUS_CHECK_CONTEXTS",
                  "GITHUB_GET_REPO_DEV_ENV_SECRET",
                  "GITHUB_GET_APPS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_GET_A_GLOBAL_SECURITY_ADVISORY",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_APP_INSTALLATION",
                  "GITHUB_ADD_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_UPDATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_LIST_TEAMS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_DELETE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_ALL_LABELS_FROM_AN_ISSUE",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_A_USER",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_CREATE_REACTION_FOR_A_RELEASE",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_COLUMN",
                  "GITHUB_CREATE_AN_ISSUE",
                  "GITHUB_GET_AN_ENVIRONMENT_PUBLIC_KEY",
                  "GITHUB_LIST_CUSTOM_PROPERTY_VALUES_FOR_ORGANIZATION_REPOSITORIES",
                  "GITHUB_GET_ALL_ORGANIZATION_REPOSITORY_RULESETS",
                  "GITHUB_REPO_S_CREATE_IN_ORG",
                  "GITHUB_MARK_A_THREAD_AS_READ",
                  "GITHUB_GET_ALL_COMMONLY_USED_LICENSES",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_COMMIT_AUTHORS",
                  "GITHUB_GET_A_THREAD_SUBSCRIPTION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_CHECK_SUITE",
                  "GITHUB_LIST_COMMITS_ON_A_PULL_REQUEST",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_A_COMMIT",
                  "GITHUB_MERGE_A_BRANCH",
                  "GITHUB_GET_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ISSUE_EVENTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_THE_REVIEW_HISTORY_FOR_A_WORKFLOW_RUN",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_SECRET",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_GIST_COMMITS",
                  "GITHUB_GET_A_REPOSITORY_SECRET",
                  "GITHUB_LIST_ISSUE_EVENTS",
                  "GITHUB_REMOVE_USERS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_REPOSITORY_DISPATCH_EVENT",
                  "GITHUB_GET_A_JOB_FOR_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_A_REPOSITORY",
                  "GITHUB_REMOVE_TEAMS_FROM_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_CODESPACES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SELECTED_REPOS_FOR_SECRET_ACCESS",
                  "GITHUB_GET_A_REFERENCE",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_TEAM_BY_NAME",
                  "GITHUB_GET_A_REPOSITORY_VARIABLE",
                  "GITHUB_LIST_WATCHERS",
                  "GITHUB_DELETE_AN_APP_TOKEN",
                  "GITHUB_LIST_COMMIT_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_SELF_HOSTED_RUNNER",
                  "GITHUB_GET_OCTOCAT",
                  "GITHUB_USERS_GET_CONTEXT_FOR_USER",
                  "GITHUB_LIST_CODESPACES_FOR_A_USER_IN_ORGANIZATION",
                  "GITHUB_UNBLOCK_A_USER",
                  "GITHUB_REMOVE_ORG_DEV_ENV_SECRET_BY_NAME",
                  "GITHUB_ACTIVITY_LIST_REPO_S_STARRED_BY_AUTHENTICATED_USER",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_DELETE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_UPDATE_GIT_LFS_PREFERENCE",
                  "GITHUB_LIST_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_REPOSITORY_VARIABLES",
                  "GITHUB_REMOVE_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_LIST_THE_PEOPLE_A_USER_FOLLOWS",
                  "GITHUB_LIST_PACKAGES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_UNBLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_SECRETS",
                  "GITHUB_FORCE_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_UPDATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_REPOSITORY_CLONES",
                  "GITHUB_RENAME_A_BRANCH",
                  "GITHUB_CREATE_OR_UPDATE_AN_ORGANIZATION_SECRET",
                  "GITHUB_LIST_ENVIRONMENTS",
                  "GITHUB_GET_AN_ASSIGNMENT",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_UPDATE_A_DISCUSSION",
                  "GITHUB_LIST_DOCKER_MIGRATION_CONFLICTS",
                  "GITHUB_LIST_REPO_SECRETS_WITHOUT_VALUES",
                  "GITHUB_DELETE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_BRANCHES",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TEAMS",
                  "GITHUB_REPO_S_LIST_CONTRIBUTORS",
                  "GITHUB_GET_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_OR_UPDATE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_META_ROOT",
                  "GITHUB_REPO_S_CREATE_FORK",
                  "GITHUB_GET_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_LIST_FORKS",
                  "GITHUB_DELETE_AN_AUTOLINK_REFERENCE_FROM_A_REPOSITORY",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_REPOS_WITH_GHACTIONS_CACHE_USAGE",
                  "GITHUB_DELETE_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_GITHUB_PAGES_BUILD",
                  "GITHUB_GET_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REQUEST_A_GITHUB_PAGES_BUILD",
                  "GITHUB_UPDATE_A_REFERENCE",
                  "GITHUB_LIST_REVIEWS_FOR_A_PULL_REQUEST",
                  "GITHUB_SEARCH_LABELS",
                  "GITHUB_DELETE_DEPENDEBOT_SECRET_BY_NAME",
                  "GITHUB_CREATE_A_WORKFLOW_DISPATCH_EVENT",
                  "GITHUB_GET_A_LABEL",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED_TO_A_ISSUE",
                  "GITHUB_LIST_REPOSITORIES_IN_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_REPOSITORY_PROJECTS",
                  "GITHUB_GET_A_COMMIT_COMMENT",
                  "GITHUB_ADD_A_REPOSITORY_TO_AN_APP_INSTALLATION",
                  "GITHUB_BLOCK_A_USER",
                  "GITHUB_ISSUES_CREATE_COMMENT",
                  "GITHUB_GET_A_CODE_QL_DATABASE_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_WORKFLOW",
                  "GITHUB_LIST_PUBLIC_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PULL_REQUESTS",
                  "GITHUB_REMOVE_REPO_FROM_ORG_DEV_ENV_SECRET",
                  "GITHUB_DELETE_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REREQUEST_A_CHECK_RUN",
                  "GITHUB_GET_SINGLE_ORG_SECRET_WITHOUT_DECRYPTION",
                  "GITHUB_CANCEL_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_AUTOMATED_SECURITY_FIXES_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REVIEW_COMMENTS_IN_A_REPOSITORY",
                  "GITHUB_ENABLE_GITHUB_ACTIONS_IN_SELECTED_REPOSITORIES",
                  "GITHUB_REPO_S_LIST_FOR_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_TEAM",
                  "GITHUB_CHECK_IF_A_PERSON_IS_FOLLOWED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_UNLOCK_A_USER_REPOSITORY",
                  "GITHUB_LIST_CHECK_RUNS_IN_A_CHECK_SUITE",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_LIST_ORGANIZATION_WEBHOOKS",
                  "GITHUB_GET_REPOSITORY_SECRET_SECURELY",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_ACTIVITY",
                  "GITHUB_LIST_ORGANIZATION_INVITATION_TEAMS",
                  "GITHUB_GIST_S_LIST_PUBLIC",
                  "GITHUB_LIST_ARTIFACTS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_USERS_LIST_EMAILS_FOR_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORG_LEVEL_CODESPACES_SECRETS",
                  "GITHUB_GET_DEFAULT_ATTRIBUTES_FOR_A_CODESPACE",
                  "GITHUB_LIST_JOBS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_SYNC_A_FORK_BRANCH_WITH_THE_UPSTREAM_REPOSITORY",
                  "GITHUB_REPO_S_LIST_BRANCHES",
                  "GITHUB_LIST_PULL_REQUESTS_FILES",
                  "GITHUB_DELETE_A_RELEASE_ASSET",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_TEAM",
                  "GITHUB_GET_A_CODE_OF_CONDUCT",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_STAR_A_GIST",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE",
                  "GITHUB_REREQUEST_A_CHECK_SUITE",
                  "GITHUB_CREATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_GET_COPILOT_SEAT_ASSIGNMENT_DETAILS_FOR_A_USER",
                  "GITHUB_LIST_TEAM_MEMBERS",
                  "GITHUB_LIST_WORKFLOW_RUN_ARTIFACTS",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE",
                  "GITHUB_UPDATE_A_PULL_REQUEST_BRANCH",
                  "GITHUB_REVIEW_RESOURCE_REQUESTS_WITH_FINE_GRAINED_TOKENS",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_CREATE_REACTION_FOR_A_COMMIT_COMMENT",
                  "GITHUB_LIST_AVAILABLE_MACHINE_TYPES_FOR_A_REPOSITORY",
                  "GITHUB_GET_REPOSITORY_CONTENT",
                  "GITHUB_LIST_REPOSITORIES_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_SUBMIT_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_GITHUB_ACTIONS_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_EVENTS",
                  "GITHUB_ADD_OR_UPDATE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_LIST_ALL_COPILOT_SEAT_ASSIGNMENTS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_UPDATE_A_RELEASE",
                  "GITHUB_LIST_REPOSITORY_RULE_SUITES",
                  "GITHUB_REVIEW_CUSTOM_DEPLOYMENT_PROTECTION_RULES_FOR_A_WORKFLOW_RUN",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_A_USER",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM_LEGACY",
                  "GITHUB_GET_DETAILS_ABOUT_A_CODESPACE_EXPORT",
                  "GITHUB_ADD_SELECTED_REPOSITORY_TO_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_LANGUAGES",
                  "GITHUB_GET_AN_APP",
                  "GITHUB_CREATE_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_LIST_USERS",
                  "GITHUB_DELETE_AN_APP_AUTHORIZATION",
                  "GITHUB_LIST_GLOBAL_SECURITY_ADVISORIES",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_OR_UPDATE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_PUBLIC_ORG_MEMBERSHIP",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_LIST_REACTIONS_FOR_A_COMMIT_COMMENT",
                  "GITHUB_ADD_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_CREATE_A_REFERENCE",
                  "GITHUB_GET_COMMUNITY_PROFILE_METRICS",
                  "GITHUB_CREATE_UPDATE_ORG_SECRET_WITH_LIB_SODIUM",
                  "GITHUB_LIST_CHECK_SUITES_FOR_A_GIT_REFERENCE",
                  "GITHUB_ADD_A_SECURITY_MANAGER_TEAM",
                  "GITHUB_GET_AN_ORGANIZATION",
                  "GITHUB_LIST_ORG_RESOURCE_ACCESS_TOKENS",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_DELETE_AN_ISSUE_COMMENT_REACTION",
                  "GITHUB_LIST_ORGANIZATION_VARIABLES",
                  "GITHUB_CREATE_A_PROJECT_CARD",
                  "GITHUB_LIST_RELEASE_ASSETS",
                  "GITHUB_LIST_CODE_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_GET_STATUS_CHECKS_PROTECTION",
                  "GITHUB_GET_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_USER_MIGRATIONS",
                  "GITHUB_CREATE_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_COMMIT_COMMENT",
                  "GITHUB_GET_ALL_REPOSITORY_TOPICS",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_DELETE_GITHUB_ACTIONS_CACHE_BY_ID",
                  "GITHUB_DELETE_A_PROJECT",
                  "GITHUB_RESTORE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_IF_A_USER_CAN_BE_ASSIGNED",
                  "GITHUB_LIST_CHECK_RUN_ANNOTATIONS",
                  "GITHUB_GET_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RE_RUN_A_JOB_FROM_A_WORKFLOW_RUN",
                  "GITHUB_GET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_A_GIST_COMMENT",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_INFORMATION_ABOUT_A_SARIF_UPLOAD",
                  "GITHUB_UPDATE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_DELETE_A_FILE",
                  "GITHUB_GET_A_CODE_SCANNING_ALERT",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_RELEASE",
                  "GITHUB_CREATE_AN_ORGANIZATION_PROJECT",
                  "GITHUB_GET_PUBLIC_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_RELEASE_ASSET",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_STATUS_CHECK_PROTECTION",
                  "GITHUB_UNLOCK_AN_ISSUE",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_GET_ALL_API_VERSIONS",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_USER",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_PRIVATELY_REPORT_A_SECURITY_VULNERABILITY",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_REMOVE_CUSTOM_LABEL_FROM_REPO_RUNNER",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_REPOSITORY",
                  "GITHUB_GET_A_BLOB",
                  "GITHUB_REMOVE_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_DELETE_WORKFLOW_RUN_LOGS",
                  "GITHUB_GET_A_REPOSITORY_README_FOR_A_DIRECTORY",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_BRANCH",
                  "GITHUB_ADD_USERS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_CUSTOMIZE_OIDC_SUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_DELETE_A_REFERENCE",
                  "GITHUB_DELETE_TEAM_DISCUSSION_COMMENT_REACTION",
                  "GITHUB_REMOVE_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_DELETE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_PULL_REQUESTS_ASSOCIATED_WITH_A_COMMIT",
                  "GITHUB_LIST_ISSUE_COMMENTS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_CREATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CHECK_PRIVATE_VULNERABILITY_REPORTING_STATUS",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER",
                  "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
                  "GITHUB_UPDATE_A_REPOSITORY_VARIABLE",
                  "GITHUB_LIST_USERS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PROJECT",
                  "GITHUB_GET_A_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_LIST_REPOSITORIES_WATCHED_BY_A_USER",
                  "GITHUB_LIST_ASSIGNEES",
                  "GITHUB_CREATE_A_USER_PROJECT",
                  "GITHUB_EXPORT_A_SOFTWARE_BILL_OF_MATERIALS_SBOM_FOR_A_REPOSITORY",
                  "GITHUB_LIST_LABELS_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY_LEGACY",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_CHECK_IF_A_USER_IS_BLOCKED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_EVENTS",
                  "GITHUB_REMOVE_ASSIGNEES_FROM_AN_ISSUE",
                  "GITHUB_GET_A_GITHUB_PAGES_SITE",
                  "GITHUB_DELETE_BRANCH_PROTECTION",
                  "GITHUB_GET_THE_WEEKLY_COMMIT_COUNT",
                  "GITHUB_LIST_DISCUSSION_COMMENTS_LEGACY",
                  "GITHUB_LIST_DEPLOYMENTS",
                  "GITHUB_GET_AN_AUTOLINK_REFERENCE_OF_A_REPOSITORY",
                  "GITHUB_CREATE_A_TAG_OBJECT",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_GITHUB_ACTIONS_CACHES_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_DISCUSSION_COMMENT",
                  "GITHUB_GET_A_GIST_COMMENT",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_A_USER",
                  "GITHUB_ISSUES_LIST_EVENTS_FOR_REPO",
                  "GITHUB_START_A_USER_MIGRATION",
                  "GITHUB_MARK_NOTIFICATIONS_AS_READ",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_INSTANCES_OF_A_CODE_SCANNING_ALERT",
                  "GITHUB_UPDATE_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_REQUEST_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_AN_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REPO_S_LIST_COLLABORATORS",
                  "GITHUB_GET_A_REPOSITORY_RULESET",
                  "GITHUB_DECLINE_A_REPOSITORY_INVITATION",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_LABEL",
                  "GITHUB_CREATE_A_TREE",
                  "GITHUB_GET_PAGE_VIEWS",
                  "GITHUB_LIST_ENVIRONMENT_VARIABLES",
                  "GITHUB_CONVERT_AN_ORGANIZATION_MEMBER_TO_OUTSIDE_COLLABORATOR",
                  "GITHUB_GET_AN_ISSUE_EVENT",
                  "GITHUB_CREATE_REACTION_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_DELETE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_CREATE_A_REPOSITORY_PROJECT",
                  "GITHUB_REMOVE_REPO_FROM_ORG_SECRET_WITH_SELECTED_VISIBILITY",
                  "GITHUB_LIST_CODEOWNERS_ERRORS",
                  "GITHUB_UPDATE_A_REPOSITORY_INVITATION",
                  "GITHUB_CREATE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RENDER_A_MARKDOWN_DOCUMENT",
                  "GITHUB_LIST_TIMELINE_EVENTS_FOR_AN_ISSUE",
                  "GITHUB_UPDATE_A_PULL_REQUEST",
                  "GITHUB_ENCRYPT_ORG_SECRETS_USING_PUBLIC_KEY",
                  "GITHUB_CREATE_A_REPOSITORY_FROM_AN_UNPUBLISHED_CODESPACE",
                  "GITHUB_UNFOLLOW_A_USER",
                  "GITHUB_RE_RUN_A_WORKFLOW",
                  "GITHUB_LIST_ORGANIZATION_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ISSUE",
                  "GITHUB_CREATE_A_TEMPORARY_PRIVATE_FORK",
                  "GITHUB_LIST_PUBLIC_GISTS",
                  "GITHUB_FIND_CONFLICTING_PACKAGES_FOR_DOCKER_MIGRATION",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_A_USER_SECRET",
                  "GITHUB_CREATE_A_FORK",
                  "GITHUB_LIST_DELIVERIES_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_DELETE_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_LIST_CHILD_TEAMS",
                  "GITHUB_REMOVE_ORG_SECRET_BY_NAME",
                  "GITHUB_MAP_A_COMMIT_AUTHOR",
                  "GITHUB_SECURITY_ADVISORIES_LIST_GLOBAL_ADVISORIES",
                  "GITHUB_LIST_GIST_COMMENTS",
                  "GITHUB_GET_LATEST_PAGES_BUILD",
                  "GITHUB_GET_A_REPOSITORY_RULE_SUITE",
                  "GITHUB_CREATE_A_DEPLOY_KEY",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_ADD_AN_EMAIL_ADDRESS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_ORGANIZATION_FINE_GRAINED_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_APPROVE_A_WORKFLOW_RUN_FOR_A_FORK_PULL_REQUEST",
                  "GITHUB_GET_A_REPOSITORY",
                  "GITHUB_LIST_PUBLIC_REPOSITORIES",
                  "GITHUB_UPDATE_RESOURCE_ACCESS_WITH_TOKENS",
                  "GITHUB_CREATE_A_DEPLOYMENT_STATUS",
                  "GITHUB_GET_A_GIST",
                  "GITHUB_UPDATE_TOKEN_ORG_ACCESS",
                  "GITHUB_LIST_GIST_FORKS",
                  "GITHUB_DELETE_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_LIST_CHECK_RUNS_FOR_A_GIT_REFERENCE",
                  "GITHUB_LIST_ENVIRONMENT_SECRETS",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_REPO_S_LIST_FOR_ORG",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_AN_APP_INSTALLATION",
                  "GITHUB_SET_USER_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_ORG_REPOS_WITHGITHUB_ACTIONS_ENABLED",
                  "GITHUB_DELETE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_DELETE_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ENCRYPT_ORG_DEV_ENV_SECRET",
                  "GITHUB_GET_A_DISCUSSION_LEGACY",
                  "GITHUB_UPDATE_BRANCH_PROTECTION",
                  "GITHUB_LIST_USERS_BLOCKED_BY_AN_ORGANIZATION",
                  "GITHUB_REMOVE_CUSTOM_LABELS_FROM_SELF_HOSTED_REPOSITORY_RUNNER",
                  "GITHUB_GENERATE_RELEASE_NOTES_CONTENT_FOR_A_RELEASE",
                  "GITHUB_BLOCK_A_USER_FROM_AN_ORGANIZATION",
                  "GITHUB_LIST_CODE_SCANNING_ANALYSES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ORGANIZATION_REPOSITORIES",
                  "GITHUB_GET_AN_ISSUE",
                  "GITHUB_DELETE_A_PROJECT_COLUMN",
                  "GITHUB_MANAGE_CUSTOM_PROPERTIES_FOR_ORG_REPOS",
                  "GITHUB_REPO_S_LIST_FOR_USER",
                  "GITHUB_LIST_ORGANIZATION_MIGRATIONS",
                  "GITHUB_DISABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_GET_A_PULL_REQUEST",
                  "GITHUB_LIST_SECURITY_MANAGER_TEAMS",
                  "GITHUB_RETRIEVE_REPO_PUBLIC_KEY_FOR_ENCRYPTION",
                  "GITHUB_GET_AN_ORGANIZATION_MIGRATION_STATUS",
                  "GITHUB_GET_A_COMMIT",
                  "GITHUB_USERS_GET_BY_USERNAME",
                  "GITHUB_GET_RATE_LIMIT_STATUS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_COMMIT_COMMENT_REACTION",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_AUTH_USER_DOCKER_CONFLICT_PACKAGES_LIST",
                  "GITHUB_GET_A_REPOSITORY_WEBHOOK",
                  "GITHUB_CANCEL_AN_ORGANIZATION_INVITATION",
                  "GITHUB_CREATE_A_DEPLOYMENT",
                  "GITHUB_LIST_ORGANIZATIONS",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FROM_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT",
                  "GITHUB_LIST_USERS_THAT_ARE_ASSIGNED_TO_AN_ORGANIZATION_ROLE",
                  "GITHUB_LIST_USER_ACCOUNT_ISSUES_ASSIGNED_TO_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_TEAM_LEGACY",
                  "GITHUB_GET_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_COMMIT_COMMENTS",
                  "GITHUB_LIST_PENDING_ORGANIZATION_INVITATIONS",
                  "GITHUB_DELETE_A_RELEASE_REACTION",
                  "GITHUB_DELETE_A_GIST_COMMENT",
                  "GITHUB_LIST_STARGAZERS",
                  "GITHUB_GET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_GET_GITHUB_ACTIONS_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_CANCEL_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_GET_GITHUB_META_INFORMATION",
                  "GITHUB_SEARCH_REPOSITORIES",
                  "GITHUB_LIST_LOCATIONS_FOR_A_SECRET_SCANNING_ALERT",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_SECRETS",
                  "GITHUB_GET_ASSIGNMENT_GRADES",
                  "GITHUB_GET_A_SECRET_SCANNING_ALERT",
                  "GITHUB_GET_AN_IMPORT_STATUS",
                  "GITHUB_LIST_TEAM_REPOSITORIES_LEGACY",
                  "GITHUB_REPO_S_CREATE_OR_UPDATE_FILE_CONTENTS",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_LIST_CHILD_TEAMS_LEGACY",
                  "GITHUB_SET_GITHUB_ACTIONS_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_ROLE",
                  "GITHUB_GET_A_CLASSROOM",
                  "GITHUB_LIST_PUBLIC_KEYS_FOR_A_USER",
                  "GITHUB_LIST_ASSIGNMENTS_FOR_A_CLASSROOM",
                  "GITHUB_UPDATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_A_USER",
                  "GITHUB_CREATE_A_GIST_COMMENT",
                  "GITHUB_LIST_DELIVERIES_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_REVIEW_COMMENTS_ON_A_PULL_REQUEST",
                  "GITHUB_UPDATE_A_CHECK_RUN",
                  "GITHUB_GET_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_UPDATE_A_CUSTOM_ORGANIZATION_ROLE",
                  "GITHUB_LIST_DEPLOYMENT_BRANCH_POLICIES",
                  "GITHUB_LIST_ORG_SECRETS_WITHOUT_VALUES",
                  "GITHUB_LIST_ISSUE_COMMENTS",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_ADD_STATUS_CHECK_CONTEXTS",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_LOGS",
                  "GITHUB_GET_A_DEPLOYMENT_STATUS",
                  "GITHUB_REPO_S_CREATE_FOR_AUTHENTICATED_USER",
                  "GITHUB_LIST_FAILED_ORGANIZATION_INVITATIONS",
                  "GITHUB_DISABLE_A_WORKFLOW",
                  "GITHUB_GET_A_DEPENDABOT_ALERT",
                  "GITHUB_GET_A_MILESTONE",
                  "GITHUB_LIST_STARRED_GISTS",
                  "GITHUB_CREATE_A_BLOB",
                  "GITHUB_DELETE_A_COMMIT_COMMENT",
                  "GITHUB_GIST_S_CREATE",
                  "GITHUB_ISSUES_LIST_FOR_REPO",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_AN_ARTIFACT",
                  "GITHUB_GET_ALL_CONTRIBUTOR_COMMIT_ACTIVITY",
                  "GITHUB_LIST_ACCEPTED_ASSIGNMENTS_FOR_AN_ASSIGNMENT",
                  "GITHUB_LIST_REPOSITORY_SECRETS_WITHOUT_DECRYPTING",
                  "GITHUB_ADD_A_SELECTED_REPOSITORY_TO_A_USER_SECRET",
                  "GITHUB_MANAGE_SECRETS_IN_SELECTED_REPOSITORIES_WITH_PROPER_ACCESS",
                  "GITHUB_LIST_LABELS_FOR_AN_ISSUE",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_ENCRYPT_AND_UPDATE_DEV_SECRET",
                  "GITHUB_LIST_PACKAGES_FOR_A_USER",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_LIST_TEAM_REPOSITORIES",
                  "GITHUB_DELETE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_CREATE_OR_UPDATE_A_REPOSITORY_SECRET",
                  "GITHUB_GET_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_REPOSITORIES_FOR_A_USER_MIGRATION",
                  "GITHUB_CHECK_IF_A_GIST_IS_STARRED",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_AN_ENVIRONMENT",
                  "GITHUB_SET_A_THREAD_SUBSCRIPTION",
                  "GITHUB_REMOVE_TEAM_MEMBER_LEGACY",
                  "GITHUB_CREATE_A_CHECK_SUITE",
                  "GITHUB_PING_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LIST_EMAIL_ADDRESSES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_DISCUSSIONS",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_CHECK_IF_A_USER_FOLLOWS_ANOTHER_USER",
                  "GITHUB_REDELIVER_A_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_ENABLE_VULNERABILITY_ALERTS",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ENVIRONMENT_CUSTOM_DEPLOYMENT_RULES",
                  "GITHUB_DOWNLOAD_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_GET_A_THREAD",
                  "GITHUB_DOWNLOAD_AN_ARTIFACT",
                  "GITHUB_ENABLE_A_WORKFLOW",
                  "GITHUB_CHECK_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_SET_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_LIST_SSH_SIGNING_KEYS_FOR_A_USER",
                  "GITHUB_LIST_ORGANIZATION_SECRETS",
                  "GITHUB_GET_PROJECT_PERMISSION_FOR_A_USER",
                  "GITHUB_REMOVE_STATUS_CHECK_PROTECTION",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_WORKFLOW",
                  "GITHUB_SET_PUBLIC_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION",
                  "GITHUB_LIST_GITHUB_PAGES_BUILDS",
                  "GITHUB_REMOVE_OUTSIDE_COLLABORATOR_FROM_AN_ORGANIZATION",
                  "GITHUB_GET_THE_LAST_YEAR_OF_COMMIT_ACTIVITY",
                  "GITHUB_SET_CUSTOM_LABELS_FOR_A_SELF_HOSTED_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_LIST_INSTALLATION_REQUESTS_FOR_THE_AUTHENTICATED_APP",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_CODE_SCANNING_ANALYSIS_FOR_A_REPOSITORY",
                  "GITHUB_GET_EMOJIS",
                  "GITHUB_UPDATE_INFORMATION_ABOUT_A_GITHUB_PAGES_SITE",
                  "GITHUB_DISABLE_REPOSITORY_ACTIONS_IN_ORG",
                  "GITHUB_ENABLE_REPO_FORGITHUB_ACTIONS",
                  "GITHUB_LIST_TEAM_PROJECTS",
                  "GITHUB_GET_TEAMS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_UPDATE_A_CODE_SCANNING_DEFAULT_SETUP_CONFIGURATION",
                  "GITHUB_USERS_GET_AUTHENTICATED",
                  "GITHUB_SET_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_REMOVE_AN_ORGANIZATION_MEMBER",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_AN_ORGANIZATION",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_TAR",
                  "GITHUB_CREATE_CONFIGURATION_FOR_A_JUST_IN_TIME_RUNNER_FOR_A_REPOSITORY",
                  "GITHUB_PULLS_CREATE_REVIEW",
                  "GITHUB_LIST_USER_PROJECTS",
                  "GITHUB_CREATE_A_SSH_SIGNING_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_DELETE_A_TEAM_LEGACY",
                  "GITHUB_LIST_SECRETS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TEAM_PROJECTS_LEGACY",
                  "GITHUB_CREATE_REACTION_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_LIST_PROJECT_COLUMNS",
                  "GITHUB_LIST_REPOSITORY_ISSUES",
                  "GITHUB_GET_THE_LATEST_RELEASE",
                  "GITHUB_GET_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_GET_A_REPOSITORY_PUBLIC_KEY",
                  "GITHUB_GET_A_COMMIT_OBJECT",
                  "GITHUB_CREATE_A_DISCUSSION_LEGACY",
                  "GITHUB_GET_CONTEXTUAL_INFORMATION_FOR_A_USER",
                  "GITHUB_START_AN_ORGANIZATION_MIGRATION",
                  "GITHUB_EMO_J_IS_GET",
                  "GITHUB_GET_A_RELEASE_ASSET",
                  "GITHUB_ADD_CUSTOM_LABELS_TO_A_SELF_HOSTED_RUNNER_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_A_PROJECT_CARD",
                  "GITHUB_SET_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_TOP_REFERRAL_PATHS",
                  "GITHUB_DELETE_A_DISCUSSION",
                  "GITHUB_SET_LABELS_FOR_AN_ISSUE",
                  "GITHUB_DELETE_A_GITHUB_PAGES_SITE",
                  "GITHUB_LIST_ORGANIZATION_MEMBERSHIPS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_GITHUB_APP_FROM_A_MANIFEST",
                  "GITHUB_DISABLE_A_CUSTOM_PROTECTION_RULE_FOR_AN_ENVIRONMENT",
                  "GITHUB_UNSTAR_A_GIST",
                  "GITHUB_USERS_LIST_SOCIAL_ACCOUNTS_FOR_USER",
                  "GITHUB_DELETE_A_RELEASE",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_YOUR_PUBLIC_REPOSITORIES",
                  "GITHUB_UPDATE_A_DEPLOYMENT_BRANCH_POLICY",
                  "GITHUB_REMOVE_USERS_FROM_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_GET_WORKFLOW_RUN_USAGE",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_A_REPOSITORY",
                  "GITHUB_SEARCH_CODE",
                  "GITHUB_CREATE_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_THE_PEOPLE_THE_AUTHENTICATED_USER_FOLLOWS",
                  "GITHUB_LIST_REPOSITORY_WEBHOOKS",
                  "GITHUB_REMOVE_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_A_GIST",
                  "GITHUB_GET_A_DISCUSSION",
                  "GITHUB_UPDATE_A_LABEL",
                  "GITHUB_GET_A_REPOSITORY_README",
                  "GITHUB_RESET_A_TOKEN",
                  "GITHUB_GET_SHARED_STORAGE_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_UNSTAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_PACKAGE_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ISSUE_COMMENT",
                  "GITHUB_CHECK_IF_A_USER_IS_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_REMOVE_A_SELECTED_REPOSITORY_FROM_A_USER_SECRET",
                  "GITHUB_ISSUES_GET",
                  "GITHUB_CREATE_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE_ON_AN_ENVIRONMENT",
                  "GITHUB_LIST_REPOSITORY_ORGANIZATION_VARIABLES",
                  "GITHUB_PULLS_GET",
                  "GITHUB_REPO_S_LIST_COMMITS",
                  "GITHUB_LIST_TEAM_MEMBERS_LEGACY",
                  "GITHUB_LIST_REPOSITORIES_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT",
                  "GITHUB_REMOVE_A_REPOSITORY_COLLABORATOR",
                  "GITHUB_SET_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_STOP_A_CODESPACE_FOR_AN_ORGANIZATION_USER",
                  "GITHUB_ACTIVITY_LIST_STARGAZERS_FOR_REPO",
                  "GITHUB_SET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_OR_UPDATE_AN_ENVIRONMENT",
                  "GITHUB_GET_ALL_AUTOLINKS_OF_A_REPOSITORY",
                  "GITHUB_LIST_PROJECT_CARDS",
                  "GITHUB_DELETE_A_REPOSITORY_RULESET",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS",
                  "GITHUB_CREATE_A_PULL_REQUEST",
                  "GITHUB_LIST_ORGANIZATION_EVENTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_ALL_CODES_OF_CONDUCT",
                  "GITHUB_ADD_PROJECT_COLLABORATOR",
                  "GITHUB_GET_AN_ENVIRONMENT",
                  "GITHUB_LIST_REPOSITORY_EVENTS",
                  "GITHUB_PULLS_CREATE",
                  "GITHUB_ADD_USERS_TO_CODESPACES_ACCESS_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_AN_AUTOLINK_REFERENCE_FOR_A_REPOSITORY",
                  "GITHUB_REMOVE_STATUS_CHECK_CONTEXTS",
                  "GITHUB_REVIEW_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_DELETE_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_GIST",
                  "GITHUB_REMOVE_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_REMOVE_SELECTED_REPOSITORY_FROM_AN_ORGANIZATION_SECRET",
                  "GITHUB_REPO_S_GET_CONTENT",
                  "GITHUB_GET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_CREATE_A_GITHUB_PAGES_SITE",
                  "GITHUB_SEARCH_TOPICS",
                  "GITHUB_ISSUES_CREATE",
                  "GITHUB_LIST_TOKEN_ACCESS_REPOSITORIES",
                  "GITHUB_TRANSFER_A_REPOSITORY",
                  "GITHUB_MANAGE_ACCESS_CONTROL_FOR_ORGANIZATION_CODESPACES",
                  "GITHUB_LIST_SECRET_SCANNING_ALERTS_FOR_A_REPOSITORY",
                  "GITHUB_DISABLE_VULNERABILITY_ALERTS",
                  "GITHUB_DELETE_A_DISCUSSION_LEGACY",
                  "GITHUB_CREATE_A_GIST",
                  "GITHUB_DELETE_A_USER_MIGRATION_ARCHIVE",
                  "GITHUB_REMOVE_A_LABEL_FROM_AN_ISSUE",
                  "GITHUB_GET_A_CHECK_RUN",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_CREATE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_BRANCHES_FOR_HEAD_COMMIT",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_ENABLE_OR_DISABLE_A_SECURITY_FEATURE_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_A_REGISTRATION_TOKEN_FOR_A_REPOSITORY",
                  "GITHUB_DOWNLOAD_AN_ORGANIZATION_MIGRATION_ARCHIVE",
                  "GITHUB_REMOVE_REQUESTED_REVIEWERS_FROM_A_PULL_REQUEST",
                  "GITHUB_CREATE_AN_ORGANIZATION_INVITATION",
                  "GITHUB_ENABLE_AUTOMATED_SECURITY_FIXES",
                  "GITHUB_UPDATE_A_MILESTONE",
                  "GITHUB_GET_A_TREE",
                  "GITHUB_GET_A_DNS_HEALTH_CHECK_FOR_GITHUB_PAGES",
                  "GITHUB_LIST_GISTS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REPOSITORIES_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_RUNNER_APPLICATIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_RULES_FOR_A_BRANCH",
                  "GITHUB_CHECK_A_TOKEN",
                  "GITHUB_ADD_REPO_TO_ORG_SECRET_WITH_SELECTED_ACCESS",
                  "GITHUB_LIST_MACHINE_TYPES_FOR_A_CODESPACE",
                  "GITHUB_CREATE_OR_UPDATE_FILE_CONTENTS",
                  "GITHUB_CHECK_ORGANIZATION_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_UPDATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_SUBSCRIPTIONS_FOR_THE_AUTHENTICATED_USER_STUBBED",
                  "GITHUB_GET_TOP_REFERRAL_SOURCES",
                  "GITHUB_DELETE_AN_ORGANIZATION_SECRET",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS",
                  "GITHUB_DELETE_A_PROJECT_CARD",
                  "GITHUB_CREATE_A_PROJECT_COLUMN",
                  "GITHUB_GET_A_SECRET_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_TAG_PROTECTION_STATES_FOR_A_REPOSITORY",
                  "GITHUB_LIST_EVENTS_RECEIVED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_VARIABLE",
                  "GITHUB_GET_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_A_RELEASE",
                  "GITHUB_GET_TEAM_MEMBER_LEGACY",
                  "GITHUB_CREATE_A_TAG_PROTECTION_STATE_FOR_A_REPOSITORY",
                  "GITHUB_LIST_ORGANIZATION_PROJECTS",
                  "GITHUB_DELETE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_GET_A_WORKFLOW_RUN_ATTEMPT",
                  "GITHUB_UPDATE_AN_IMPORT",
                  "GITHUB_GET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_SET_THE_LEVEL_OF_ACCESS_FOR_WORKFLOWS_OUTSIDE_OF_THE_REPOSITORY",
                  "GITHUB_UNLOCK_AN_ORGANIZATION_REPOSITORY",
                  "GITHUB_DELETE_A_MILESTONE",
                  "GITHUB_GET_PULL_REQUEST_REVIEW_PROTECTION",
                  "GITHUB_GET_USERS_WITH_ACCESS_TO_THE_PROTECTED_BRANCH",
                  "GITHUB_REMOVE_AN_ORGANIZATION_ROLE_FROM_A_USER",
                  "GITHUB_REQUEST_A_CVE_FOR_A_REPOSITORY_SECURITY_ADVISORY",
                  "GITHUB_LIST_CODESPACES_IN_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_COMMIT_STATUSES_FOR_A_REFERENCE",
                  "GITHUB_DELETE_AN_ARTIFACT",
                  "GITHUB_REMOVE_TEAM_MEMBERSHIP_FOR_A_USER_LEGACY",
                  "GITHUB_DELETE_A_PENDING_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_CREATE_A_DISCUSSION_COMMENT",
                  "GITHUB_REPO_S_GET_COMMIT",
                  "GITHUB_LIST_DEPENDABOT_ALERTS_FOR_AN_ENTERPRISE",
                  "GITHUB_LIST_DISCUSSION_COMMENTS",
                  "GITHUB_REMOVE_ALL_ORGANIZATION_ROLES_FOR_A_USER",
                  "GITHUB_UPDATE_A_REPOSITORY_RULESET",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_A_USER",
                  "GITHUB_LIST_REPOSITORY_TAGS",
                  "GITHUB_DELETE_A_PULL_REQUEST_COMMENT_REACTION",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_PROJECT_LEGACY",
                  "GITHUB_GET_BRANCH_PROTECTION",
                  "GITHUB_COMPARE_TWO_COMMITS",
                  "GITHUB_REMOVE_USER_AS_A_COLLABORATOR",
                  "GITHUB_LIST_REPOSITORY_TEAMS",
                  "GITHUB_ISSUES_LIST_ASSIGN_EES",
                  "GITHUB_UPDATE_A_DISCUSSION_COMMENT",
                  "GITHUB_SET_INTERACTION_RESTRICTIONS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_A_REPOSITORY_RULESET",
                  "GITHUB_PING_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_GET_THE_ZEN_OF_GITHUB",
                  "GITHUB_SEARCH_ISSUES_AND_PULL_REQUESTS",
                  "GITHUB_CREATE_OR_UPDATE_REPO_SECRET_WITH_ENCRYPTED_VALUE",
                  "GITHUB_GET_PENDING_DEPLOYMENTS_FOR_A_WORKFLOW_RUN",
                  "GITHUB_LIST_REACTIONS_FOR_A_TEAM_DISCUSSION_LEGACY",
                  "GITHUB_GET_A_USER_MIGRATION_STATUS",
                  "GITHUB_REMOVE_A_PROJECT_FROM_A_TEAM",
                  "GITHUB_SET_PRIMARY_EMAIL_VISIBILITY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_MERGE_A_PULL_REQUEST",
                  "GITHUB_LIST_REPOSITORY_CONTRIBUTORS",
                  "GITHUB_LIST_DEPLOY_KEYS",
                  "GITHUB_GET_A_WEBHOOK_CONFIGURATION_FOR_AN_ORGANIZATION",
                  "GITHUB_ENABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_LIST_REPO_DEV_CONTAINER_CONFIGS_FOR_USER",
                  "GITHUB_FOLLOW_A_USER",
                  "GITHUB_DELETE_A_CODESPACE_FROM_THE_ORGANIZATION",
                  "GITHUB_GET_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_GET_COPILOT_SEAT_INFORMATION_AND_SETTINGS_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_REPOSITORY_PREFERENCES_FOR_CHECK_SUITES",
                  "GITHUB_ISSUES_LIST",
                  "GITHUB_PULLS_LIST",
                  "GITHUB_CREATE_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_LIST_SELECTED_REPOSITORIES_FOR_AN_ORGANIZATION_SECRET",
                  "GITHUB_GET_A_GPG_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_GPG_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_ADD_TEAMS_TO_THE_COPILOT_SUBSCRIPTION_FOR_AN_ORGANIZATION",
                  "GITHUB_UPDATE_AN_ORGANIZATION_MEMBERSHIP_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_A_DEPLOY_KEY",
                  "GITHUB_LIST_SELF_HOSTED_RUNNERS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_PENDING_TEAM_INVITATIONS_LEGACY",
                  "GITHUB_CLEAR_REPOSITORY_CACHE_BY_KEY",
                  "GITHUB_GET_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_GET_THE_STATUS_OF_A_GITHUB_PAGES_DEPLOYMENT",
                  "GITHUB_LIST_GISTS_FOR_A_USER",
                  "GITHUB_MARK_A_THREAD_AS_DONE",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION_COMMENT",
                  "GITHUB_CREATE_A_CODESPACE_FROM_A_PULL_REQUEST",
                  "GITHUB_DELETE_AN_ENVIRONMENT_VARIABLE",
                  "GITHUB_LIST_OUTSIDE_COLLABORATORS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_GPG_KEYS_FOR_A_USER",
                  "GITHUB_UPDATE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_CREATE_A_MILESTONE",
                  "GITHUB_GET_A_DIFF_OF_THE_DEPENDENCIES_BETWEEN_COMMITS",
                  "GITHUB_DELETE_A_REPOSITORY_SECRET",
                  "GITHUB_GET_THE_COMBINED_STATUS_FOR_A_SPECIFIC_REFERENCE",
                  "GITHUB_GET_A_DELIVERY_FOR_A_REPOSITORY_WEBHOOK",
                  "GITHUB_MOVE_A_PROJECT_COLUMN",
                  "GITHUB_UPDATE_A_PROJECT",
                  "GITHUB_CREATE_OR_UPDATE_CUSTOM_PROPERTIES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_ORGANIZATION_RULE_SUITES",
                  "GITHUB_GET_A_WORKFLOW_RUN",
                  "GITHUB_CREATE_A_CODESPACE_IN_A_REPOSITORY",
                  "GITHUB_CONFIGURE_JITRUNNER_FOR_ORG",
                  "GITHUB_DELETE_A_CODE_SCANNING_ANALYSIS_FROM_A_REPOSITORY",
                  "GITHUB_LIST_ORG_RESOURCES_WITH_PERSONAL_TOKENS",
                  "GITHUB_CHECK_IF_A_PULL_REQUEST_HAS_BEEN_MERGED",
                  "GITHUB_CUSTOM_OIDCSUBJECT_CLAIM_TEMPLATE_SETTER",
                  "GITHUB_GET_A_PROJECT_COLUMN",
                  "GITHUB_GET_A_CUSTOM_PROPERTY_FOR_AN_ORGANIZATION",
                  "GITHUB_DELETE_A_PUBLIC_SSH_KEY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_SET_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_WORKFLOWS",
                  "GITHUB_DELETE_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_UPDATE_A_DISCUSSION_LEGACY",
                  "GITHUB_LIST_DISCUSSIONS_LEGACY",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_AN_ORGANIZATION",
                  "GITHUB_CREATE_AN_ORGANIZATION_REPOSITORY_RULESET",
                  "GITHUB_GET_A_WEBHOOK_DELIVERY_FOR_AN_ORGANIZATION_WEBHOOK",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS",
                  "GITHUB_GET_DEFAULT_WORKFLOW_PERMISSIONS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_REPOSITORY_INVITATIONS",
                  "GITHUB_GET_ALL_REPOSITORY_RULESETS",
                  "GITHUB_GET_FEEDS",
                  "GITHUB_CREATE_A_COMMIT_STATUS",
                  "GITHUB_ADD_TEAM_MEMBER_LEGACY",
                  "GITHUB_CHECK_IF_VULNERABILITY_ALERTS_ARE_ENABLED_FOR_A_REPOSITORY",
                  "GITHUB_MOVE_A_PROJECT_CARD",
                  "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DISCUSSION_COMMENT_LEGACY",
                  "GITHUB_GET_A_DEPLOYMENT",
                  "GITHUB_LIST_LABELS_FOR_ISSUES_IN_A_MILESTONE",
                  "GITHUB_GET_A_USER",
                  "GITHUB_SET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_NOTIFICATIONS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_CODE_QL_DATABASES_FOR_A_REPOSITORY",
                  "GITHUB_SEARCH_REPO_S",
                  "GITHUB_CONFIGURE_OIDCSUBJECT_CLAIM_TEMPLATE",
                  "GITHUB_RESTORE_PACKAGE_VERSION_FOR_A_USER",
                  "GITHUB_GET_THE_HOURLY_COMMIT_COUNT_FOR_EACH_DAY",
                  "GITHUB_CREATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_LOCK_AN_ISSUE",
                  "GITHUB_CREATE_A_REVIEW_COMMENT_FOR_A_PULL_REQUEST",
                  "GITHUB_REMOVE_APP_ACCESS_RESTRICTIONS",
                  "GITHUB_CHECK_TEAM_PERMISSIONS_FOR_A_REPOSITORY",
                  "GITHUB_GET_ALL_CUSTOM_PROPERTY_VALUES_FOR_A_REPOSITORY",
                  "GITHUB_SET_ADMIN_BRANCH_PROTECTION",
                  "GITHUB_LIST_REACTIONS_FOR_AN_ISSUE_COMMENT",
                  "GITHUB_DELETE_A_DEPLOYMENT",
                  "GITHUB_LIST_COMMITS",
                  "GITHUB_RESTORE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_EXPORT_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_UPDATE_A_REPOSITORY_WEBHOOK",
                  "GITHUB_GET_A_TAG",
                  "GITHUB_UPDATE_A_TEAM",
                  "GITHUB_LIST_PUBLIC_EVENTS_FOR_A_NETWORK_OF_REPOSITORIES",
                  "GITHUB_PULLS_CREATE_REVIEW_COMMENT",
                  "GITHUB_DELETE_A_THREAD_SUBSCRIPTION",
                  "GITHUB_TEST_THE_PUSH_REPOSITORY_WEBHOOK",
                  "GITHUB_FORK_A_GIST",
                  "GITHUB_LIST_PACKAGE_VERSIONS_FOR_A_PACKAGE_OWNED_BY_AN_ORGANIZATION",
                  "GITHUB_FETCH_PUBLIC_KEY_FOR_SECRET_ENCRYPTION",
                  "GITHUB_CREATE_REACTION_FOR_A_TEAM_DISCUSSION",
                  "GITHUB_ADD_OR_UPDATE_TEAM_REPOSITORY_PERMISSIONS_LEGACY",
                  "GITHUB_CREATE_AN_ISSUE_COMMENT",
                  "GITHUB_CREATE_A_SCOPED_ACCESS_TOKEN",
                  "GITHUB_REPO_S_GET_CONTRIBUTORS_STATS",
                  "GITHUB_DELETE_A_LABEL",
                  "GITHUB_GET_A_RELEASE_BY_TAG_NAME",
                  "GITHUB_REMOVE_A_REPOSITORY_FROM_A_TEAM_LEGACY",
                  "GITHUB_DELETE_A_PACKAGE_VERSION_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_LIST_PUBLIC_ORGANIZATION_MEMBERS",
                  "GITHUB_LIST_REACTIONS_FOR_A_RELEASE",
                  "GITHUB_GET_ALLOWED_ACTIONS_AND_REUSABLE_WORKFLOWS_FOR_AN_ORGANIZATION",
                  "GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER",
                  "GITHUB_GET_GITHUB_PACKAGES_BILLING_FOR_A_USER",
                  "GITHUB_LIST_REPO_ACCESS_BY_TOKEN",
                  "GITHUB_GET_ALL_REQUESTED_REVIEWERS_FOR_A_PULL_REQUEST",
                  "GITHUB_GET_ALL_DEPLOYMENT_PROTECTION_RULES_FOR_AN_ENVIRONMENT",
                  "GITHUB_DELETE_A_REPOSITORY_SUBSCRIPTION",
                  "GITHUB_GET_THE_LICENSE_FOR_A_REPOSITORY",
                  "GITHUB_ADD_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_SECURITY_ADVISORIES",
                  "GITHUB_REPLACE_ORG_SECRET_VISIBILITY_TO_SELECTED",
                  "GITHUB_CREATE_A_REMOVE_TOKEN_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_MATCHING_REFERENCES",
                  "GITHUB_UPDATE_A_REPOSITORY",
                  "GITHUB_USERS_LIST_PUBLIC_EMAILS_FOR_AUTHENTICATED_USER",
                  "GITHUB_REPLACE_REPO_ACCESS_ON_ORG_DEV_ENV_SECRET_SET",
                  "GITHUB_LIST_PUBLIC_SSH_KEYS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_AN_ORGANIZATION_SECRET",
                  "GITHUB_CHECK_IF_A_REPOSITORY_IS_STARRED_BY_THE_AUTHENTICATED_USER",
                  "GITHUB_GET_ACCESS_RESTRICTIONS",
                  "GITHUB_LIST_REPOSITORY_COLLABORATORS",
                  "GITHUB_GET_GITHUB_ACTIONS_CACHE_USAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_PUBLIC_EVENTS_RECEIVED_BY_A_USER",
                  "GITHUB_CREATE_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_USERS_LIST_FOLLOWERS_FOR_AUTHENTICATED_USER",
                  "GITHUB_CLEAR_SELF_HOSTED_RUNNER_ORG_LABELS",
                  "GITHUB_LIST_MILESTONES",
                  "GITHUB_PULLS_CHECK_IF_MERGED",
                  "GITHUB_DELETE_A_TEAM",
                  "GITHUB_DELETE_AN_ORGANIZATION",
                  "GITHUB_DELETE_AN_ENVIRONMENT_SECRET",
                  "GITHUB_GET_REPOSITORY_PERMISSIONS_FOR_A_USER",
                  "GITHUB_CREATE_A_CHECK_RUN",
                  "GITHUB_LIST_CLASSROOMS",
                  "GITHUB_MARK_REPOSITORY_NOTIFICATIONS_AS_READ",
                  "GITHUB_GITHUB_API_ROOT",
                  "GITHUB_DOWNLOAD_A_REPOSITORY_ARCHIVE_ZIP",
                  "GITHUB_GET_WORKFLOW_USAGE",
                  "GITHUB_GET_AN_ORGANIZATION_PUBLIC_KEY",
                  "GITHUB_REVIEW_ACCESS_WITH_PERSONAL_TOKEN",
                  "GITHUB_ADD_OR_UPDATE_TEAM_PROJECT_PERMISSIONS_LEGACY",
                  "GITHUB_LIST_APP_INSTALLATIONS_ACCESSIBLE_TO_THE_USER_ACCESS_TOKEN",
                  "GITHUB_RE_RUN_FAILED_JOBS_FROM_A_WORKFLOW_RUN",
                  "GITHUB_ACCEPT_A_REPOSITORY_INVITATION",
                  "GITHUB_REPLACE_ALL_REPOSITORY_TOPICS",
                  "GITHUB_LIST_TEAMS_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_DEPLOY_KEY",
                  "GITHUB_GET_A_GIST_REVISION",
                  "GITHUB_DELETE_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_TEAM_DISCUSSION_REACTION",
                  "GITHUB_UPLOAD_AN_ANALYSIS_AS_SARIF_DATA",
                  "GITHUB_LIST_FOLLOWERS_OF_A_USER",
                  "GITHUB_LIST_SOCIAL_ACCOUNTS_FOR_A_USER",
                  "GITHUB_CREATE_A_TEAM",
                  "GITHUB_LIST_REACTIONS_FOR_A_PULL_REQUEST_REVIEW_COMMENT",
                  "GITHUB_LIST_REPOSITORY_ACTIVITIES",
                  "GITHUB_DELETE_A_REPOSITORY_VARIABLE",
                  "GITHUB_DELETE_A_WORKFLOW_RUN",
                  "GITHUB_STOP_A_CODESPACE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_DELETE_A_PACKAGE_FOR_THE_AUTHENTICATED_USER",
                  "GITHUB_REPO_S_GET_CODE_FREQUENCY_STATS",
                  "GITHUB_DELETE_A_SELF_HOSTED_RUNNER_FROM_AN_ORGANIZATION",
                  "GITHUB_VERIFY_DEV_CONTAINER_PERMISSIONS_ACCEPTED",
                  "GITHUB_DOWNLOAD_WORKFLOW_RUN_ATTEMPT_LOGS",
                  "GITHUB_GET_ALL_ORGANIZATION_ROLES_FOR_AN_ORGANIZATION",
                  "GITHUB_LIST_RELEASES",
                  "GITHUB_DELETE_A_REPOSITORY_INVITATION",
                  "GITHUB_LIST_WORKFLOW_RUNS_FOR_A_REPOSITORY",
                  "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION",
                  "GITHUB_REMOVE_TEAM_ACCESS_RESTRICTIONS",
                  "GITHUB_GET_A_CUSTOM_DEPLOYMENT_PROTECTION_RULE",
                  "GITHUB_ASSIGN_AN_ORGANIZATION_ROLE_TO_A_USER",
                  "GITHUB_LIST_ORGANIZATIONS_FOR_A_USER",
                  "GITHUB_GET_TEAM_MEMBERSHIP_FOR_A_USER",
                  "GITHUB_DISMISS_A_REVIEW_FOR_A_PULL_REQUEST",
                  "GITHUB_UPDATE_AN_EXISTING_PROJECT_CARD",
                  "GITHUB_GET_A_LICENSE",
                  "GITHUB_LIST_PACKAGES_FOR_THE_AUTHENTICATED_USER_S_NAMESPACE",
                  "GITHUB_UPDATE_A_DEPENDABOT_ALERT",
                  "GITHUB_DISABLE_PRIVATE_VULNERABILITY_REPORTING_FOR_A_REPOSITORY",
                  "GITHUB_GET_A_PACKAGE_FOR_AN_ORGANIZATION",
                  "GITHUB_ADD_ASSIGNEES_TO_AN_ISSUE"
                ],
                "combobox": false,
                "list": true,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "action_names",
                "value": [
                  "GITHUB_CREATE_A_REPOSITORY_USING_A_TEMPLATE",
                  "GITHUB_CREATE_A_COMMIT",
                  "GITHUB_CREATE_COMMIT_SIGNATURE_PROTECTION"
                ],
                "display_name": "Actions to use",
                "advanced": false,
                "dynamic": true,
                "info": "The actions to pass to agent to execute",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "real_time_refresh": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_credentials": {
                "load_from_db": false,
                "required": false,
                "placeholder": "",
                "show": false,
                "name": "app_credentials",
                "value": "",
                "display_name": "App Credentials",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": true,
                "info": "Credentials for app authentication (API Key, Password, etc)",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "app_names": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "ACCELO",
                  "AIRTABLE",
                  "AMAZON",
                  "APALEO",
                  "ASANA",
                  "ATLASSIAN",
                  "ATTIO",
                  "AUTH0",
                  "BATTLENET",
                  "BITBUCKET",
                  "BLACKBAUD",
                  "BLACKBOARD",
                  "BOLDSIGN",
                  "BORNEO",
                  "BOX",
                  "BRAINTREE",
                  "BREX",
                  "BREX_STAGING",
                  "BRIGHTPEARL",
                  "CALENDLY",
                  "CANVA",
                  "CANVAS",
                  "CHATWORK",
                  "CLICKUP",
                  "CONFLUENCE",
                  "CONTENTFUL",
                  "D2LBRIGHTSPACE",
                  "DEEL",
                  "DIALPAD",
                  "DISCORD",
                  "DISCORDBOT",
                  "DOCUSIGN",
                  "DROPBOX",
                  "DROPBOX_SIGN",
                  "DYNAMICS365",
                  "EPIC_GAMES",
                  "EVENTBRITE",
                  "EXIST",
                  "FACEBOOK",
                  "FIGMA",
                  "FITBIT",
                  "FRESHBOOKS",
                  "FRONT",
                  "GITHUB",
                  "GMAIL",
                  "GO_TO_WEBINAR",
                  "GOOGLE_ANALYTICS",
                  "GOOGLE_MAPS",
                  "GOOGLEADS",
                  "GOOGLECALENDAR",
                  "GOOGLEDOCS",
                  "GOOGLEDRIVE",
                  "GOOGLEMEET",
                  "GOOGLEPHOTOS",
                  "GOOGLESHEETS",
                  "GOOGLESUPER",
                  "GOOGLETASKS",
                  "GORGIAS",
                  "GUMROAD",
                  "HARVEST",
                  "HIGHLEVEL",
                  "HUBSPOT",
                  "ICIMS_TALENT_CLOUD",
                  "INTERCOM",
                  "JIRA",
                  "KEAP",
                  "KLAVIYO",
                  "KOMMO",
                  "LASTPASS",
                  "LEVER",
                  "LEVER_SANDBOX",
                  "LINEAR",
                  "LINKEDIN",
                  "LINKHUT",
                  "MAILCHIMP",
                  "METAADS",
                  "MICROSOFT_TEAMS",
                  "MICROSOFT_TENANT",
                  "MIRO",
                  "MONDAY",
                  "MURAL",
                  "NETSUITE",
                  "NOTION",
                  "ONE_DRIVE",
                  "OUTLOOK",
                  "PAGERDUTY",
                  "PIPEDRIVE",
                  "PRODUCTBOARD",
                  "REDDIT",
                  "RING_CENTRAL",
                  "RIPPLING",
                  "SAGE",
                  "SALESFORCE",
                  "SEISMIC",
                  "SERVICEM8",
                  "SHARE_POINT",
                  "SHOPIFY",
                  "SLACK",
                  "SLACKBOT",
                  "SMARTRECRUITERS",
                  "SQUARE",
                  "STACK_EXCHANGE",
                  "SURVEY_MONKEY",
                  "TIMELY",
                  "TODOIST",
                  "TONEDEN",
                  "TRELLO",
                  "TWITCH",
                  "TWITTER",
                  "TWITTER_MEDIA",
                  "WAKATIME",
                  "WAVE_ACCOUNTING",
                  "WEBEX",
                  "WIZ",
                  "WRIKE",
                  "XERO",
                  "YANDEX",
                  "YNAB",
                  "YOUTUBE",
                  "ZENDESK",
                  "ZOHO",
                  "ZOHO_BIGIN",
                  "ZOHO_BOOKS",
                  "ZOHO_DESK",
                  "ZOHO_INVENTORY",
                  "ZOHO_INVOICE",
                  "ZOHO_MAIL",
                  "ZOOM"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "app_names",
                "value": "GITHUB",
                "display_name": "App Name",
                "advanced": false,
                "dynamic": false,
                "info": "The app name to use. Please refresh after selecting app name",
                "refresh_button": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "auth_status": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "auth_status",
                "value": "✅",
                "display_name": "Auth Status",
                "advanced": false,
                "dynamic": true,
                "info": "Current authentication status",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\nimport requests\n\n# Third-party imports\nfrom composio.client.collections import AppAuthScheme\nfrom composio.client.exceptions import NoItemsFound\nfrom composio_langchain import Action, ComposioToolSet\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, LinkInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\nfrom langflow.io import Output\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Composio Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent\"\n    name = \"ComposioAPI\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        # Basic configuration inputs\n        MessageTextInput(name=\"entity_id\", display_name=\"Entity ID\", value=\"default\", advanced=True),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"app_names\",\n            display_name=\"App Name\",\n            options=[],\n            value=\"\",\n            info=\"The app name to use. Please refresh after selecting app name\",\n            refresh_button=True,\n            required=True,\n        ),\n        # Authentication-related inputs (initially hidden)\n        SecretStrInput(\n            name=\"app_credentials\",\n            display_name=\"App Credentials\",\n            required=False,\n            dynamic=True,\n            show=False,\n            info=\"Credentials for app authentication (API Key, Password, etc)\",\n            load_from_db=False,\n        ),\n        MessageTextInput(\n            name=\"username\",\n            display_name=\"Username\",\n            required=False,\n            dynamic=True,\n            show=False,\n            info=\"Username for Basic authentication\",\n        ),\n        LinkInput(\n            name=\"auth_link\",\n            display_name=\"Authentication Link\",\n            value=\"\",\n            info=\"Click to authenticate with OAuth2\",\n            dynamic=True,\n            show=False,\n            placeholder=\"Click to authenticate\",\n        ),\n        StrInput(\n            name=\"auth_status\",\n            display_name=\"Auth Status\",\n            value=\"Not Connected\",\n            info=\"Current authentication status\",\n            dynamic=True,\n            show=False,\n        ),\n        MultiselectInput(\n            name=\"action_names\",\n            display_name=\"Actions to use\",\n            required=True,\n            options=[],\n            value=[],\n            info=\"The actions to pass to agent to execute\",\n            dynamic=True,\n            show=False,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def _check_for_authorization(self, app: str) -> str:\n        \"\"\"Checks if the app is authorized.\n\n        Args:\n            app (str): The app name to check authorization for.\n\n        Returns:\n            str: The authorization status or URL.\n        \"\"\"\n        toolset = self._build_wrapper()\n        entity = toolset.client.get_entity(id=self.entity_id)\n        try:\n            # Check if user is already connected\n            entity.get_connection(app=app)\n        except NoItemsFound:\n            # Get auth scheme for the app\n            auth_scheme = self._get_auth_scheme(app)\n            return self._handle_auth_by_scheme(entity, app, auth_scheme)\n        except Exception:  # noqa: BLE001\n            logger.exception(\"Authorization error\")\n            return \"Error checking authorization\"\n        else:\n            return f\"{app} CONNECTED\"\n\n    def _get_auth_scheme(self, app_name: str) -> AppAuthScheme:\n        \"\"\"Get the primary auth scheme for an app.\n\n        Args:\n            app_name (str): The name of the app to get auth scheme for.\n\n        Returns:\n            AppAuthScheme: The auth scheme details.\n        \"\"\"\n        toolset = self._build_wrapper()\n        try:\n            return toolset.get_auth_scheme_for_app(app=app_name.lower())\n        except Exception:  # noqa: BLE001\n            logger.exception(f\"Error getting auth scheme for {app_name}\")\n            return None\n\n    def _get_oauth_apps(self, api_key: str) -> list[str]:\n        \"\"\"Fetch OAuth-enabled apps from Composio API.\n\n        Args:\n            api_key (str): The Composio API key.\n\n        Returns:\n            list[str]: A list containing OAuth-enabled app names.\n        \"\"\"\n        oauth_apps = []\n        try:\n            url = \"https://backend.composio.dev/api/v1/apps\"\n            headers = {\"x-api-key\": api_key}\n            params = {\n                \"includeLocal\": \"true\",\n                \"additionalFields\": \"auth_schemes\",\n                \"sortBy\": \"alphabet\",\n            }\n\n            response = requests.get(url, headers=headers, params=params, timeout=20)\n            data = response.json()\n\n            for item in data.get(\"items\", []):\n                for auth_scheme in item.get(\"auth_schemes\", []):\n                    if auth_scheme.get(\"mode\") in [\"OAUTH1\", \"OAUTH2\"]:\n                        oauth_apps.append(item[\"key\"].upper())\n                        break\n        except requests.RequestException as e:\n            logger.error(f\"Error fetching OAuth apps: {e}\")\n            return []\n        else:\n            return oauth_apps\n\n    def _handle_auth_by_scheme(self, entity: Any, app: str, auth_scheme: AppAuthScheme) -> str:\n        \"\"\"Handle authentication based on the auth scheme.\n\n        Args:\n            entity (Any): The entity instance.\n            app (str): The app name.\n            auth_scheme (AppAuthScheme): The auth scheme details.\n\n        Returns:\n            str: The authentication status or URL.\n        \"\"\"\n        auth_mode = auth_scheme.auth_mode\n\n        try:\n            # First check if already connected\n            entity.get_connection(app=app)\n        except NoItemsFound:\n            # If not connected, handle new connection based on auth mode\n            if auth_mode == \"API_KEY\":\n                if hasattr(self, \"app_credentials\") and self.app_credentials:\n                    try:\n                        entity.initiate_connection(\n                            app_name=app,\n                            auth_mode=\"API_KEY\",\n                            auth_config={\"api_key\": self.app_credentials},\n                            use_composio_auth=False,\n                            force_new_integration=True,\n                        )\n                    except Exception as e:  # noqa: BLE001\n                        logger.error(f\"Error connecting with API Key: {e}\")\n                        return \"Invalid API Key\"\n                    else:\n                        return f\"{app} CONNECTED\"\n                return \"Enter API Key\"\n\n            if (\n                auth_mode == \"BASIC\"\n                and hasattr(self, \"username\")\n                and hasattr(self, \"app_credentials\")\n                and self.username\n                and self.app_credentials\n            ):\n                try:\n                    entity.initiate_connection(\n                        app_name=app,\n                        auth_mode=\"BASIC\",\n                        auth_config={\"username\": self.username, \"password\": self.app_credentials},\n                        use_composio_auth=False,\n                        force_new_integration=True,\n                    )\n                except Exception as e:  # noqa: BLE001\n                    logger.error(f\"Error connecting with Basic Auth: {e}\")\n                    return \"Invalid credentials\"\n                else:\n                    return f\"{app} CONNECTED\"\n            elif auth_mode == \"BASIC\":\n                return \"Enter Username and Password\"\n\n            if auth_mode == \"OAUTH2\":\n                try:\n                    return self._initiate_default_connection(entity, app)\n                except Exception as e:  # noqa: BLE001\n                    logger.error(f\"Error initiating OAuth2: {e}\")\n                    return \"OAuth2 initialization failed\"\n\n            return \"Unsupported auth mode\"\n        except Exception as e:  # noqa: BLE001\n            logger.error(f\"Error checking connection status: {e}\")\n            return f\"Error: {e!s}\"\n        else:\n            return f\"{app} CONNECTED\"\n\n    def _initiate_default_connection(self, entity: Any, app: str) -> str:\n        connection = entity.initiate_connection(app_name=app, use_composio_auth=True, force_new_integration=True)\n        return connection.redirectUrl\n\n    def _get_connected_app_names_for_entity(self) -> list[str]:\n        toolset = self._build_wrapper()\n        connections = toolset.client.get_entity(id=self.entity_id).get_connections()\n        return list({connection.appUniqueId for connection in connections})\n\n    def _get_normalized_app_name(self) -> str:\n        \"\"\"Get app name without connection status suffix.\n\n        Returns:\n            str: Normalized app name.\n        \"\"\"\n        return self.app_names.replace(\" ✅\", \"\").replace(\"_connected\", \"\")\n\n    def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None) -> dict:  # noqa: ARG002\n        # Update the available apps options from the API\n        if hasattr(self, \"api_key\") and self.api_key != \"\":\n            toolset = self._build_wrapper()\n            build_config[\"app_names\"][\"options\"] = self._get_oauth_apps(api_key=self.api_key)\n\n        # First, ensure all dynamic fields are hidden by default\n        dynamic_fields = [\"app_credentials\", \"username\", \"auth_link\", \"auth_status\", \"action_names\"]\n        for field in dynamic_fields:\n            if field in build_config:\n                if build_config[field][\"value\"] is None or build_config[field][\"value\"] == \"\":\n                    build_config[field][\"show\"] = False\n                    build_config[field][\"advanced\"] = True\n                    build_config[field][\"load_from_db\"] = False\n                else:\n                    build_config[field][\"show\"] = True\n                    build_config[field][\"advanced\"] = False\n\n        if field_name == \"app_names\" and (not hasattr(self, \"app_names\") or not self.app_names):\n            build_config[\"auth_status\"][\"show\"] = True\n            build_config[\"auth_status\"][\"value\"] = \"Please select an app first\"\n            return build_config\n\n        if field_name == \"app_names\" and hasattr(self, \"api_key\") and self.api_key != \"\":\n            # app_name = self._get_normalized_app_name()\n            app_name = self.app_names\n            try:\n                toolset = self._build_wrapper()\n                entity = toolset.client.get_entity(id=self.entity_id)\n\n                # Always show auth_status when app is selected\n                build_config[\"auth_status\"][\"show\"] = True\n                build_config[\"auth_status\"][\"advanced\"] = False\n\n                try:\n                    # Check if already connected\n                    entity.get_connection(app=app_name)\n                    build_config[\"auth_status\"][\"value\"] = \"✅\"\n                    build_config[\"auth_link\"][\"show\"] = False\n                    # Show action selection for connected apps\n                    build_config[\"action_names\"][\"show\"] = True\n                    build_config[\"action_names\"][\"advanced\"] = False\n\n                except NoItemsFound:\n                    # Get auth scheme and show relevant fields\n                    auth_scheme = self._get_auth_scheme(app_name)\n                    auth_mode = auth_scheme.auth_mode\n                    logger.info(f\"Auth mode for {app_name}: {auth_mode}\")\n\n                    if auth_mode == \"API_KEY\":\n                        build_config[\"app_credentials\"][\"show\"] = True\n                        build_config[\"app_credentials\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"display_name\"] = \"API Key\"\n                        build_config[\"auth_status\"][\"value\"] = \"Enter API Key\"\n\n                    elif auth_mode == \"BASIC\":\n                        build_config[\"username\"][\"show\"] = True\n                        build_config[\"username\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"show\"] = True\n                        build_config[\"app_credentials\"][\"advanced\"] = False\n                        build_config[\"app_credentials\"][\"display_name\"] = \"Password\"\n                        build_config[\"auth_status\"][\"value\"] = \"Enter Username and Password\"\n\n                    elif auth_mode == \"OAUTH2\":\n                        build_config[\"auth_link\"][\"show\"] = True\n                        build_config[\"auth_link\"][\"advanced\"] = False\n                        auth_url = self._initiate_default_connection(entity, app_name)\n                        build_config[\"auth_link\"][\"value\"] = auth_url\n                        build_config[\"auth_status\"][\"value\"] = \"Click link to authenticate\"\n\n                    else:\n                        build_config[\"auth_status\"][\"value\"] = \"Unsupported auth mode\"\n\n                # Update action names if connected\n                if build_config[\"auth_status\"][\"value\"] == \"✅\":\n                    all_action_names = [str(action).replace(\"Action.\", \"\") for action in Action.all()]\n                    app_action_names = [\n                        action_name\n                        for action_name in all_action_names\n                        if action_name.lower().startswith(app_name.lower() + \"_\")\n                    ]\n                    if build_config[\"action_names\"][\"options\"] != app_action_names:\n                        build_config[\"action_names\"][\"options\"] = app_action_names\n                        build_config[\"action_names\"][\"value\"] = [app_action_names[0]] if app_action_names else [\"\"]\n\n            except Exception as e:  # noqa: BLE001\n                logger.error(f\"Error checking auth status: {e}, app: {app_name}\")\n                build_config[\"auth_status\"][\"value\"] = f\"Error: {e!s}\"\n\n        return build_config\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = self._build_wrapper()\n        return composio_toolset.get_tools(actions=self.action_names)\n\n    def _build_wrapper(self) -> ComposioToolSet:\n        \"\"\"Build the Composio toolset wrapper.\n\n        Returns:\n            ComposioToolSet: The initialized toolset.\n\n        Raises:\n            ValueError: If the API key is not found or invalid.\n        \"\"\"\n        try:\n            if not self.api_key:\n                msg = \"Composio API Key is required\"\n                raise ValueError(msg)\n            return ComposioToolSet(api_key=self.api_key, entity_id=self.entity_id)\n        except ValueError as e:\n            logger.error(f\"Error building Composio wrapper: {e}\")\n            msg = \"Please provide a valid Composio API Key in the component settings\"\n            raise ValueError(msg) from e\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "entity_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "entity_id",
                "value": "default",
                "display_name": "Entity ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "username": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": false,
                "name": "username",
                "value": "",
                "display_name": "Username",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": true,
                "info": "Username for Basic authentication",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Use Composio toolset to run actions with your agent",
            "icon": "Composio",
            "base_classes": [
              "Tool"
            ],
            "display_name": "Composio Tools",
            "documentation": "https://docs.composio.dev",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tools",
                "hidden": null,
                "display_name": "Tools",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "entity_id",
              "api_key",
              "app_names",
              "app_credentials",
              "username",
              "auth_link",
              "auth_status",
              "action_names"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "category": "composio",
            "key": "ComposioAPI",
            "score": 0.0000025911107559075892,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "ComposioAPI",
          "id": "ComposioAPI-PKflo"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 497
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-M1AeK",
        "type": "genericNode",
        "position": {
          "x": 1834.0780714562834,
          "y": 131.75039280081089
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "IBM Cloud API Key",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict\nfrom langflow.custom import Component\nfrom langflow.io import MultilineInput, MessageTextInput, SecretStrInput, DropdownInput, Output, BoolInput, SliderInput\nfrom langflow.schema import Data\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.schema.message import Message\nfrom ibm_watsonx_ai import APIClient, Credentials\nfrom langchain_ibm import ChatWatsonx\nfrom langflow.base.models.model import LCModelComponent\n\n\nclass WatsonxComponent(LCModelComponent):\n    \"\"\"\n    A Langflow component for IBM watsonx.ai integration.\n    \"\"\"\n    display_name = \"IBM watsonx.ai\"\n    description = \"Connect to IBM watsonx.ai for AI model inference\"\n    icon = \"custom_components\"\n    documentation = \"https://cloud.ibm.com/apidocs/watsonx\"\n    name = \"WatsonxComponent\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"IBM Cloud API Key\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"endpoint\",\n            display_name=\"Endpoint URL\",\n            info=\"Region endpoint URL for IBM watsonx.ai\",\n            required=True,\n            value=\"https://us-south.ml.cloud.ibm.com\"\n        ),\n        MessageTextInput(\n            name=\"project_id\",\n            display_name=\"Project ID\",\n            info=\"IBM Watsonx.ai Project ID\",\n            required=True,\n            value=\"76673d5e-76e3-428c-9134-f8975dead5d4\"\n        ),\n        DropdownInput(\n            name=\"model_id\",\n            display_name=\"Model ID\",\n            options=[\n                \"ibm/granite-3-2-8b-instruct\",\n                \"meta-llama/llama-3-3-70b-instruct\"\n            ],\n            value=\"ibm/granite-3-2-8b-instruct\",\n            info=\"Select the watsonx.ai model to use\",\n            required=True,\n        ),\n        DropdownInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            options=[\"512\", \"1024\", \"2048\", \"4096\"],\n            value=\"1024\",\n            info=\"Maximum tokens to generate\",\n            required=False,\n        ),\n        BoolInput(\n            name=\"enable_tools\",\n            display_name=\"Enable Tool Models\",\n            info=\"Toggle to enable additional tool support\",\n            value=False,\n            required=False\n        )\n    ]\n\n    outputs = [\n        Output(\n            name=\"language_model\",\n            display_name=\"Language Model\",\n            info=\"Callable tool for IBM watsonx.ai model\",\n            method=\"build_model\",\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:\n            api_key = self.api_key\n            endpoint = self.endpoint\n            model_id = self.model_id\n            tokens = int(self.max_tokens) if self.max_tokens else 1024\n            \n            model_params = {\n                \"time_limit\": 100000,\n            }\n\n            # Create credentials and API client, then set the default project\n            credentials = Credentials(api_key=api_key, url=endpoint)\n            client = APIClient(credentials)\n            client.set.default_project(self.project_id)\n\n            output = ChatWatsonx(\n                model_id=model_id,\n                watsonx_client=client, \n                params=model_params,\n                streaming=False,\n                project_id=self.project_id,\n                url=endpoint\n            )\n\n            return output\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "enable_tools": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "enable_tools",
                "value": false,
                "display_name": "Enable Tool Models",
                "advanced": false,
                "dynamic": false,
                "info": "Toggle to enable additional tool support",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "endpoint": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "endpoint",
                "value": "https://us-south.ml.cloud.ibm.com",
                "display_name": "Endpoint URL",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Region endpoint URL for IBM watsonx.ai",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "512",
                  "1024",
                  "2048",
                  "4096"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "4096",
                "display_name": "Max Tokens",
                "advanced": false,
                "dynamic": false,
                "info": "Maximum tokens to generate",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "model_id": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "ibm/granite-3-2-8b-instruct",
                  "meta-llama/llama-3-3-70b-instruct"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "model_id",
                "value": "meta-llama/llama-3-3-70b-instruct",
                "display_name": "Model ID",
                "advanced": false,
                "dynamic": false,
                "info": "Select the watsonx.ai model to use",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "load_from_db": false
              },
              "project_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "project_id",
                "value": "76673d5e-76e3-428c-9134-f8975dead5d4",
                "display_name": "Project ID",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "IBM Watsonx.ai Project ID",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Connect to IBM watsonx.ai for AI model inference",
            "icon": "custom_components",
            "base_classes": [
              "LanguageModel"
            ],
            "display_name": "IBM watsonx.ai",
            "documentation": "https://cloud.ibm.com/apidocs/watsonx",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "LanguageModel"
                ],
                "selected": "LanguageModel",
                "name": "language_model",
                "hidden": null,
                "display_name": "Language Model",
                "method": "build_model",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "api_key",
              "endpoint",
              "project_id",
              "model_id",
              "max_tokens",
              "enable_tools"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "WatsonxComponent",
          "id": "CustomComponent-M1AeK"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 622
        },
        "dragging": false
      },
      {
        "id": "ComposioAPI-wKzfo",
        "type": "genericNode",
        "position": {
          "x": 4062.4052953872606,
          "y": 565.1163244499279
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "real_time_refresh": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\n# Third-party imports\nfrom composio.client.collections import AppAuthScheme\nfrom composio.client.exceptions import NoItemsFound\nfrom composio_langchain import Action, ComposioToolSet\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, LinkInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\nfrom langflow.io import Output\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"swe_tools\"\n    description: str = \"Action.FILETOOL_GIT_REPO_TREE,Action.FILETOOL_GIT_PATCH\"\n    name = \"Composio Local Git and File Tools\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = ComposioToolSet(api_key=self.api_key)\n        return composio_toolset.get_actions(actions=[Action.FILETOOL_GIT_REPO_TREE,\n                Action.FILETOOL_GIT_PATCH,\n            ])",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Action.FILETOOL_GIT_REPO_TREE,Action.FILETOOL_GIT_PATCH",
            "icon": "Composio",
            "base_classes": [
              "Tool"
            ],
            "display_name": "swe_tools",
            "documentation": "https://docs.composio.dev",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tools",
                "hidden": null,
                "display_name": "Tools",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Composio Local Git and File Tools",
          "id": "ComposioAPI-wKzfo"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 249
        },
        "dragging": false
      },
      {
        "id": "Agent-OEgcx",
        "type": "genericNode",
        "position": {
          "x": 3394.7767102463704,
          "y": 1647.3613875656497
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Code Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = True\n    name = \"Code Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "## Clone GitHub repository from template using Composio Local Git and File Tools tool\n- Perform a Git Clone of the created repository to copy the files locally us the tool Composio Local with action FILETOOL_GIT_CLONE. For the repo name refer to full_name\n- repo_name: {repo_name}",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Specify the name of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "hidden": false
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "Describe the purpose of the tool.",
                      "default": "None",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "hidden": false
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "formatter": "text",
                      "type": "str",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "default": "None",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "hidden": true
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "Code-Agent",
                    "description": "A helpful assistant with access to the following tools:",
                    "tags": [
                      "Code-Agent"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Code Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": true,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": true,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Code Agent",
          "id": "Agent-OEgcx"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 544
        },
        "dragging": false
      },
      {
        "id": "Agent-PxAMU",
        "type": "genericNode",
        "position": {
          "x": 4963.392926152309,
          "y": 981.5697968453004
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": false,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false,
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\nfrom composio_langchain import Action, ComposioToolSet\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Software Engineer\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = True\n    name = \"Code Tools Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "SOFTWARE_ENGINEER_PROMPT = \"\"\"\nYou are an autonomous infrastructure engineer tasked with solving Terraform-related issues. Your role is to coordinate between infrastructure code analysis and editing tasks. Follow these guidelines:\n\nYou have access to the following tools:\n- FILETOOL_GIT_REPO_TREE: Use this to view the repository structure.\n- FILETOOL_GIT_PATCH: Use this to generate patches for changes.\n\nDo the following steps in the same order:\n\n1. Issue Understanding:\n   - Carefully read and understand the given Terraform issue or configuration problem.\n   - Form a hypothesis about the infrastructure issue and potential solutions.\n   - A workspace is initialized for you, and you will be working on this workspace.\n   - The git repo is cloned in the path and you need to work in this directory.\n   - MAKE SURE THE EXISTING INFRASTRUCTURE CODE ISN'T BROKEN BY SOLVING THE ISSUE. THE SOLUTION SHOULD BE MINIMAL AND SHOULD NOT DISRUPT EXISTING RESOURCES OR DEPENDENCIES.\n\n2. Use the GIT_REPO_TREE tool to understand the file structure of the Terraform codebase.\n   - You have the repo-tree printed at the git_repo_tree.txt file.\n   - SINCE YOU ARE AT SOME PREVIOUS VERSION OF THE CODE, YOUR INFORMATION ABOUT THE TERRAFORM CODEBASE IS OUTDATED, SO YOU NEED TO UNDERSTAND THE CURRENT INFRASTRUCTURE AS CODE FROM SCRATCH AGAIN.\n\n3. Codebase Analysis:\n   - Identify and examine relevant .tf, .tfvars, and .hcl files to understand the infrastructure components.\n   - Review module structures, variable definitions, outputs, and resource configurations.\n   - Understand provider requirements and versions.\n   - Check for state management configurations and backend setup.\n\n4. Solution Planning:\n   - Plan minimal changes to address the issue without disrupting existing infrastructure.\n   - Consider Terraform best practices such as idempotency and resource dependencies.\n   - Ensure backward compatibility and proper state handling.\n   - Evaluate if changes require 'terraform plan' validation before implementation.\n\n5. Implementation:\n   - Make targeted changes to the necessary Terraform files.\n   - Update variables, resources, or modules as needed.\n   - Follow HCL syntax and formatting conventions.\n   - Add appropriate comments explaining complex configurations.\n   - Ensure version constraints are appropriate for providers and modules.\n\n6. Validation:\n   - Verify that your changes follow Terraform best practices.\n   - Ensure resource naming is consistent with existing conventions.\n   - Check that changes don't introduce state drift or unexpected resource replacements.\n   - Validate syntax with terraform validate principles.\n\n7. Documentation:\n   - Document your changes clearly, explaining what was modified and why.\n   - Note any dependencies or requirements for applying the changes.\n   - Include appropriate information for README updates if necessary.\n   - Mention if terraform init or other specific commands are required after changes.\n\"\"\"",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Software Engineer",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": true,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Code Tools Agent",
          "id": "Agent-PxAMU"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 459
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-paLfk",
        "type": "genericNode",
        "position": {
          "x": 6256.555287568649,
          "y": 982.2218558996582
        },
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-paLfk",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "Code Tools Agent-c74R5",
        "type": "genericNode",
        "position": {
          "x": 4970.232903589387,
          "y": 41.030878748427696
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": false,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false,
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\nfrom composio_langchain import Action, ComposioToolSet\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"File Tools Agent\"\n    description: str = \"File Tools Agent.\"\n    icon = \"bot\"\n    beta = True\n    name = \"Editor\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "EDITING_AGENT_PROMPT = \"\"\"\nYou are an autonomous code editor with the ability to modify files and generate patches. \nYour role is to implement the changes requested by the Software Engineer to fix issues or improve the codebase. \nFollow these guidelines:\n\n1. Tool Usage:\n   You have access to the following FILETOOL actions:\n   - GIT_REPO_TREE: Use this to view the repository structure.\n   - LIST_FILES: Use this to list files in the current directory.\n   - CHANGE_WORKING_DIRECTORY: Use this to navigate the file system.\n   - OPEN_FILE: Use this to open and view file contents.\n   - SEARCH_WORD: Use this to search for a word in the file.\n   - SCROLL: Use this to navigate within an open file.\n   - EDIT_FILE: Use this to make changes to the code.\n   - CREATE_FILE: Use this to create new files.\n   - FIND_FILE: Use this to search for specific files.\n   - WRITE: Use this to write content to files.\n\n2. Precise Editing:\n   - Open the file at the edit location using FILETOOL_OPEN_FILE action to read the code you are going to edit.\n   - Make changes according to the instructions provided by the Software Engineer.\n   - Pay close attention to line numbers, indentation, and syntax.\n   - If the edit fails, pay attention to the start_line and end_line parameters of the FILETOOL_EDIT_FILE action.\n   - If the start_line and end_line are not correct, try to correct them by looking at the code around the region.\n   - Also make sure to provide the correct input format, with \"start_line\", \"end_line\", \"file_path\" and \"text\" as keys.\n\n3. Error Handling:\n   - Review and resolve linting errors while maintaining functionality.\n   - Try alternative commands if one fails.\n\n4. Completion:\n   - After implementing the requested changes, end your response with \"EDITING COMPLETED\".\n\nProvide a short and concise thought regarding the next steps whenever you call a tool, based on the \noutput of the tool.",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              }
            },
            "description": "File Tools Agent.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "File Tools Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": true,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Editor",
          "id": "Code Tools Agent-c74R5"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        },
        "dragging": false
      },
      {
        "id": "Composio Local Git and File Tools-AsQ7i",
        "type": "genericNode",
        "position": {
          "x": 4073.391014082339,
          "y": -345.0948352897484
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "real_time_refresh": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\n# Third-party imports\nfrom composio.client.collections import AppAuthScheme\nfrom composio.client.exceptions import NoItemsFound\nfrom composio_langchain import Action, ComposioToolSet\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, LinkInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\nfrom langflow.io import Output\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"Local Git and File Tools\"\n    description: str = \"Use Composio toolset to run actions with your agent related to local Git and File operations. Available tools: Action.FILETOOL_GIT_REPO_TREE, Action.FILETOOL_LIST_FILES, Action.FILETOOL_CHANGE_WORKING_DIRECTORY, Action.FILETOOL_OPEN_FILE, Action.FILETOOL_SCROLL, Action.FILETOOL_EDIT_FILE, Action.FILETOOL_CREATE_FILE, Action.FILETOOL_FIND_FILE, Action.FILETOOL_SEARCH_WORD, Action.FILETOOL_WRITE,\"\n    name = \"Local Git and File Tools\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = ComposioToolSet(api_key=self.api_key)\n        return composio_toolset.get_actions(\n            actions=[\n                Action.FILETOOL_GIT_REPO_TREE,\n                Action.FILETOOL_LIST_FILES,\n                Action.FILETOOL_CHANGE_WORKING_DIRECTORY,\n                Action.FILETOOL_OPEN_FILE,\n                Action.FILETOOL_SCROLL,\n                Action.FILETOOL_EDIT_FILE,\n                Action.FILETOOL_CREATE_FILE,\n                Action.FILETOOL_FIND_FILE,\n                Action.FILETOOL_SEARCH_WORD,\n                Action.FILETOOL_WRITE,\n            ])\n\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Use Composio toolset to run actions with your agent related to local Git and File operations. Available tools: Action.FILETOOL_GIT_REPO_TREE, Action.FILETOOL_LIST_FILES, Action.FILETOOL_CHANGE_WORKING_DIRECTORY, Action.FILETOOL_OPEN_FILE, Action.FILETOOL_SCROLL, Action.FILETOOL_EDIT_FILE, Action.FILETOOL_CREATE_FILE, Action.FILETOOL_FIND_FILE, Action.FILETOOL_SEARCH_WORD, Action.FILETOOL_WRITE,",
            "icon": "Composio",
            "base_classes": [
              "Tool"
            ],
            "display_name": "Local Git and File Tools",
            "documentation": "https://docs.composio.dev",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tools",
                "hidden": null,
                "display_name": "Tools",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Local Git and File Tools",
          "id": "Composio Local Git and File Tools-AsQ7i"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 469
        },
        "dragging": false
      },
      {
        "id": "Code Tools Agent-iYR7f",
        "type": "genericNode",
        "position": {
          "x": 4990.308446734172,
          "y": 1786.6654416453518
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": false,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "load_from_db": false,
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [
                  "LanguageModel"
                ],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\nfrom composio_langchain import Action, ComposioToolSet\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Code Testing\"\n    description: str = \"Code Testing Agent.\"\n    icon = \"bot\"\n    beta = True\n    name = \"Code Testing Tools\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "This will be used for testing Terraform tools aren't yet available",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              }
            },
            "description": "Code Testing Agent.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Code Testing",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": true,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Code Testing Tools",
          "id": "Code Tools Agent-iYR7f"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 439
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-3VHEd",
        "type": "genericNode",
        "position": {
          "x": 6296.617476905753,
          "y": 228.24930062259523
        },
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-3VHEd",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-equTJ",
        "type": "genericNode",
        "position": {
          "x": 6441.724346027606,
          "y": 1959.9473773562486
        },
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Chat Output",
          "id": "ChatOutput-equTJ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.2.0",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return (\n                    data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n                    .applymap(lambda x: (str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x))\n                    .to_markdown(index=False)\n                )\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      },
      {
        "id": "Composio Local Git and File Tools-yn5sM",
        "type": "genericNode",
        "position": {
          "x": 4117.058076283223,
          "y": 2395.9209371288816
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "Composio API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Refer to https://docs.composio.dev/faq/api_key/api_key",
                "real_time_refresh": true,
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "# Standard library imports\nfrom collections.abc import Sequence\nfrom typing import Any\n\n# Third-party imports\nfrom composio.client.collections import AppAuthScheme\nfrom composio.client.exceptions import NoItemsFound\nfrom composio_langchain import Action, ComposioToolSet\nfrom langchain_core.tools import Tool\nfrom loguru import logger\n\n# Local imports\nfrom langflow.base.langchain_utilities.model import LCToolComponent\nfrom langflow.inputs import DropdownInput, LinkInput, MessageTextInput, MultiselectInput, SecretStrInput, StrInput\nfrom langflow.io import Output\n\n\nclass ComposioAPIComponent(LCToolComponent):\n    display_name: str = \"testing_tools\"\n    description: str = \"TBC\"\n    name = \"Composio Local Git and File Tools\"\n    icon = \"Composio\"\n    documentation: str = \"https://docs.composio.dev\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Composio API Key\",\n            required=True,\n            info=\"Refer to https://docs.composio.dev/faq/api_key/api_key\",\n            real_time_refresh=True,\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"tools\", display_name=\"Tools\", method=\"build_tool\"),\n    ]\n\n    def build_tool(self) -> Sequence[Tool]:\n        \"\"\"Build Composio tools based on selected actions.\n\n        Returns:\n            Sequence[Tool]: List of configured Composio tools.\n        \"\"\"\n        composio_toolset = ComposioToolSet(api_key=self.api_key)\n        return composio_toolset.get_actions(actions=[\n            ])",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "TBC",
            "icon": "Composio",
            "base_classes": [
              "Tool"
            ],
            "display_name": "testing_tools",
            "documentation": "https://docs.composio.dev",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "tools",
                "hidden": null,
                "display_name": "Tools",
                "method": "build_tool",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.2.0"
          },
          "showNode": true,
          "type": "Composio Local Git and File Tools",
          "id": "Composio Local Git and File Tools-yn5sM"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "Agent-fsDxt",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-fsDxtœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-q2z2g",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-q2z2gœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-q2z2g",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-fsDxt",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Agent-fsDxt{œdataTypeœ:œAgentœ,œidœ:œAgent-fsDxtœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-q2z2g{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-q2z2gœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ComposioAPI-PKflo",
        "sourceHandle": "{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-PKfloœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-fsDxt",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-fsDxt",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "ComposioAPI",
            "id": "ComposioAPI-PKflo",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__ComposioAPI-PKflo{œdataTypeœ:œComposioAPIœ,œidœ:œComposioAPI-PKfloœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-fsDxt{œfieldNameœ:œtoolsœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "className": "",
        "animated": false
      },
      {
        "source": "CustomComponent-M1AeK",
        "sourceHandle": "{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Agent-fsDxt",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Agent-fsDxt",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WatsonxComponent",
            "id": "CustomComponent-M1AeK",
            "name": "language_model",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__CustomComponent-M1AeK{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-fsDxt{œfieldNameœ:œagent_llmœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "",
        "selected": false
      },
      {
        "source": "ChatInput-YtZxI",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-YtZxIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-fsDxt",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-fsDxt",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-YtZxI",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ChatInput-YtZxI{œdataTypeœ:œChatInputœ,œidœ:œChatInput-YtZxIœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-fsDxt{œfieldNameœ:œinput_valueœ,œidœ:œAgent-fsDxtœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatOutput-q2z2g",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-q2z2gœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-OEgcx",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-OEgcx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-q2z2g",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ChatOutput-q2z2g{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-q2z2gœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-OEgcx{œfieldNameœ:œinput_valueœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ComposioAPI-wKzfo",
        "sourceHandle": "{œdataTypeœ:œComposio Local Git and File Toolsœ,œidœ:œComposioAPI-wKzfoœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-PxAMU",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-PxAMU",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Composio Local Git and File Tools",
            "id": "ComposioAPI-wKzfo",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__ComposioAPI-wKzfo{œdataTypeœ:œComposio Local Git and File Toolsœ,œidœ:œComposioAPI-wKzfoœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Agent-PxAMU{œfieldNameœ:œtoolsœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-M1AeK",
        "sourceHandle": "{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Agent-OEgcx",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Agent-OEgcx",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WatsonxComponent",
            "id": "CustomComponent-M1AeK",
            "name": "language_model",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__CustomComponent-M1AeK{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-OEgcx{œfieldNameœ:œagent_llmœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Agent-OEgcx",
        "sourceHandle": "{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-PxAMU",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-PxAMU",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Code Agent",
            "id": "Agent-OEgcx",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__Agent-OEgcx{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-PxAMU{œfieldNameœ:œtoolsœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatOutput-q2z2g",
        "sourceHandle": "{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-q2z2gœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-OEgcx",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-OEgcx",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatOutput",
            "id": "ChatOutput-q2z2g",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__ChatOutput-q2z2g{œdataTypeœ:œChatOutputœ,œidœ:œChatOutput-q2z2gœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-OEgcx{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-OEgcxœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Agent-OEgcx",
        "sourceHandle": "{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Code Tools Agent-c74R5",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Code Tools Agent-c74R5",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Code Agent",
            "id": "Agent-OEgcx",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__Agent-OEgcx{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Code Tools Agent-c74R5{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Composio Local Git and File Tools-AsQ7i",
        "sourceHandle": "{œdataTypeœ:œLocal Git and File Toolsœ,œidœ:œComposio Local Git and File Tools-AsQ7iœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Code Tools Agent-c74R5",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Code Tools Agent-c74R5",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Local Git and File Tools",
            "id": "Composio Local Git and File Tools-AsQ7i",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__Composio Local Git and File Tools-AsQ7i{œdataTypeœ:œLocal Git and File Toolsœ,œidœ:œComposio Local Git and File Tools-AsQ7iœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Code Tools Agent-c74R5{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Agent-OEgcx",
        "sourceHandle": "{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Code Tools Agent-iYR7f",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Code Tools Agent-iYR7f",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Code Agent",
            "id": "Agent-OEgcx",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__Agent-OEgcx{œdataTypeœ:œCode Agentœ,œidœ:œAgent-OEgcxœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Code Tools Agent-iYR7f{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Code Tools Agent-c74R5",
        "sourceHandle": "{œdataTypeœ:œEditorœ,œidœ:œCode Tools Agent-c74R5œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-3VHEd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3VHEdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-3VHEd",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Editor",
            "id": "Code Tools Agent-c74R5",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Code Tools Agent-c74R5{œdataTypeœ:œEditorœ,œidœ:œCode Tools Agent-c74R5œ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-3VHEd{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3VHEdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Composio Local Git and File Tools-yn5sM",
        "sourceHandle": "{œdataTypeœ:œComposio Local Git and File Toolsœ,œidœ:œComposio Local Git and File Tools-yn5sMœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}",
        "target": "Code Tools Agent-iYR7f",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "tools",
            "id": "Code Tools Agent-iYR7f",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "Composio Local Git and File Tools",
            "id": "Composio Local Git and File Tools-yn5sM",
            "name": "tools",
            "output_types": [
              "Tool"
            ]
          }
        },
        "id": "xy-edge__Composio Local Git and File Tools-yn5sM{œdataTypeœ:œComposio Local Git and File Toolsœ,œidœ:œComposio Local Git and File Tools-yn5sMœ,œnameœ:œtoolsœ,œoutput_typesœ:[œToolœ]}-Code Tools Agent-iYR7f{œfieldNameœ:œtoolsœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-M1AeK",
        "sourceHandle": "{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Code Tools Agent-iYR7f",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Code Tools Agent-iYR7f",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WatsonxComponent",
            "id": "CustomComponent-M1AeK",
            "name": "language_model",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__CustomComponent-M1AeK{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}-Code Tools Agent-iYR7f{œfieldNameœ:œagent_llmœ,œidœ:œCode Tools Agent-iYR7fœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-M1AeK",
        "sourceHandle": "{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Agent-PxAMU",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Agent-PxAMU",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WatsonxComponent",
            "id": "CustomComponent-M1AeK",
            "name": "language_model",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__CustomComponent-M1AeK{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}-Agent-PxAMU{œfieldNameœ:œagent_llmœ,œidœ:œAgent-PxAMUœ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "CustomComponent-M1AeK",
        "sourceHandle": "{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}",
        "target": "Code Tools Agent-c74R5",
        "targetHandle": "{œfieldNameœ:œagent_llmœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "agent_llm",
            "id": "Code Tools Agent-c74R5",
            "inputTypes": [
              "LanguageModel"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "WatsonxComponent",
            "id": "CustomComponent-M1AeK",
            "name": "language_model",
            "output_types": [
              "LanguageModel"
            ]
          }
        },
        "id": "xy-edge__CustomComponent-M1AeK{œdataTypeœ:œWatsonxComponentœ,œidœ:œCustomComponent-M1AeKœ,œnameœ:œlanguage_modelœ,œoutput_typesœ:[œLanguageModelœ]}-Code Tools Agent-c74R5{œfieldNameœ:œagent_llmœ,œidœ:œCode Tools Agent-c74R5œ,œinputTypesœ:[œLanguageModelœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Agent-PxAMU",
        "sourceHandle": "{œdataTypeœ:œCode Tools Agentœ,œidœ:œAgent-PxAMUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-paLfk",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-paLfkœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-paLfk",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Code Tools Agent",
            "id": "Agent-PxAMU",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Agent-PxAMU{œdataTypeœ:œCode Tools Agentœ,œidœ:œAgent-PxAMUœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-paLfk{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-paLfkœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      },
      {
        "source": "Code Tools Agent-iYR7f",
        "sourceHandle": "{œdataTypeœ:œCode Testing Toolsœ,œidœ:œCode Tools Agent-iYR7fœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-equTJ",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-equTJœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-equTJ",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "Code Testing Tools",
            "id": "Code Tools Agent-iYR7f",
            "name": "response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__Code Tools Agent-iYR7f{œdataTypeœ:œCode Testing Toolsœ,œidœ:œCode Tools Agent-iYR7fœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-equTJ{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-equTJœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": -169.4581261032572,
      "y": 405.5431462756934,
      "zoom": 0.23010315566767192
    }
  },
  "description": "A POV for Terraform Module workflow using agent based workflow and MCP tooling",
  "name": "TerraformModuleWorkflow",
  "last_tested_version": "1.2.0",
  "endpoint_name": null,
  "is_component": false
}